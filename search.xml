<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSX概述</title>
    <url>/2022/02/14/JSX%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="一、JSX定义"><a href="#一、JSX定义" class="headerlink" title="一、JSX定义"></a>一、JSX定义</h2><p><code>JSX</code> 是 <code>JavaScript</code> 的扩展语法，这种 <code>&lt;&gt;&lt;/&gt;</code> 标签的写法就是 JSX。JSX就是Javascript+XML。即在Javascript里面写XML，因为JSX的这个特性，所以他即具备了Javascript的灵活性，同时又兼具html的语义化和直观性。JSX 编写的组件通过预处理器 babel 解析后，再交给 React 库渲染到指定父容器下，形成最终html页面，供浏览器解析和显示。</p>
<h2 id="二、JSX使用"><a href="#二、JSX使用" class="headerlink" title="二、JSX使用"></a>二、JSX使用</h2><h3 id="1-声明变量"><a href="#1-声明变量" class="headerlink" title="1. 声明变量"></a>1. 声明变量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-设置属性"><a href="#2-设置属性" class="headerlink" title="2. 设置属性"></a>2. 设置属性</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabIndex</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>; <span class="comment">// tabIndex指示元素能否聚焦</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputAttrs = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;Enter your email&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...</span>&#123; <span class="attr">attrs:</span> <span class="attr">inputAttrs</span> &#125;&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-包含多个子元素"><a href="#3-包含多个子元素" class="headerlink" title="3. 包含多个子元素"></a>3. 包含多个子元素</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Shit!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="4-作为表达式在return中返回"><a href="#4-作为表达式在return中返回" class="headerlink" title="4. 作为表达式在return中返回"></a>4. 作为表达式在return中返回</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getGreeting</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, Stranger.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">FormRender</span> <span class="attr">node</span>=<span class="string">&#123;</span> <span class="attr">this.form.getRoot</span>() &#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./my-component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-使用JS表达式"><a href="#5-使用JS表达式" class="headerlink" title="5. 使用JS表达式"></a>5. 使用JS表达式</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSX 中调用 js 函数：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatName</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Harper&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Perez&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Hello, &#123;formatName(user)&#125;!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 渲染element元素并加载到父容器root下</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">    element,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// JSX 嵌入 复杂表达式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;numbers.map((number) =&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-消息框内html"><a href="#6-消息框内html" class="headerlink" title="6. 消息框内html"></a>6. 消息框内html</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Message</span>.<span class="title function_">alert</span>(&#123;</span><br><span class="line">  <span class="comment">// 此处使用了JSX</span></span><br><span class="line">  <span class="attr">messge</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>确定要删除<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>学习子君Vue系列文章<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的笔记?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-函数式组件"><a href="#7-函数式组件" class="headerlink" title="7. 函数式组件"></a>7. 函数式组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 通过配置functional属性指定组件为函数式组件</span></span><br><span class="line">  <span class="attr">functional</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 渲染函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">h</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; context 函数式组件没有this, props, slots等都在context上面挂着</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h, context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; props &#125; = context</span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">avatar</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;props.avatar&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;default-avatar.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><a href="https://zhuanlan.zhihu.com/p/419011328">https://zhuanlan.zhihu.com/p/419011328</a></li>
<li><a href="https://blog.csdn.net/qq_31967569/article/details/118146056?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_aa&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">https://blog.csdn.net/qq_31967569/article/details/118146056?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_aa&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></li>
<li><a href="https://github.com/vuejs/jsx-vue2#installation">https://github.com/vuejs/jsx-vue2#installation</a></li>
</ol>
]]></content>
      <tags>
        <tag>JSX</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript权威指南——整理</title>
    <url>/2022/02/17/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、词法结构"><a href="#一、词法结构" class="headerlink" title="一、词法结构"></a>一、词法结构</h2><h3 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1. 标识符"></a>1. 标识符</h3><p>必须以字母、_、$开头，后续字符还可以是数字。</p>
<h3 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2. 保留字"></a>2. 保留字</h3><p>as async await break case catch class const continue debugger default delete do else export extends false </p>
<p>finally for from function get if import in instanceof let new null of return set static super switch target this throw true try typeof var void while with yield</p>
<p>enum implements interface package private protected public</p>
<p>arguments eval</p>
<h3 id="3-可选的分号"><a href="#3-可选的分号" class="headerlink" title="3. 可选的分号"></a>3. 可选的分号</h3><p>并不是所有情况下才会把所有换行符当成分号，只有当一行没法解释的时候才会读入下一行。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>TODO</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript异步</title>
    <url>/2022/02/18/Javascript%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><p>程序的运行是同步的（同步不意味着所有步骤同时运行，而是指步骤在一个控制流序列中按顺序执行）。而异步的概念则是不保证同步的概念，也就是说，一个异步过程的执行将不再与原有的序列有顺序关系。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/07/async-sync.png" alt="img"></p>
<table>
<thead>
<tr>
<th></th>
<th>同步</th>
<th>异步</th>
</tr>
</thead>
<tbody><tr>
<td>理解</td>
<td>同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去</td>
<td>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率</td>
</tr>
<tr>
<td>阻塞&#x2F;非阻塞</td>
<td>阻塞</td>
<td>非阻塞</td>
</tr>
<tr>
<td>优点</td>
<td>同步是按照顺序一个一个来，不会乱掉，更不会出现上面代码没有执行完就执行下面的代码</td>
<td>异步是接取一个任务，直接给后台，在接下一个任务，一直一直这样，谁的先读取完先执行谁的</td>
</tr>
<tr>
<td>缺点</td>
<td>解析的速度没有异步的快</td>
<td>没有顺序 ，谁先读取完先执行谁的 ，会出现上面的代码还没出来下面的就已经出来了，会报错</td>
</tr>
</tbody></table>
<p><img src="https://pic2.zhimg.com/v2-51fc4c32dd0ec7dcd6157688977f7d30_1440w.jpg?source=172ae18b" alt="同步和异步的区别"></p>
<p>同步异步 ， 举个例子来说，一家餐厅吧来了5个客人，<strong>同步</strong>的意思就是说，来第一个点菜，点了个鱼，好， 厨师去捉鱼杀鱼，过了半小时鱼好了给第一位客人，开始下位一位客人，就这样一个一个来，按<strong>顺序</strong>来。</p>
<p>相同， <strong>异步</strong>呢，异步的意思就是来第一位客人，点什么，点鱼，给它一个牌子，让他去一边等吧，下一位客人接着点菜，点完接着点让厨师做去吧，哪个的菜先好就先端出来。</p>
<p><img src="https://pic1.zhimg.com/80/v2-6d3b4934b2d896163e2619bcc2300af4_1440w.jpg" alt="img"></p>
<h1 id="使用异步的情况——阻塞"><a href="#使用异步的情况——阻塞" class="headerlink" title="使用异步的情况——阻塞"></a>使用异步的情况——阻塞</h1><h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><p>在前端编程中（甚至后端有时也是这样），我们在处理一些简短、快速的操作时，例如计算 1 + 1 的结果，往往在主线程中就可以完成。主线程作为一个线程，不能够同时接受多方面的请求。所以，当一个事件没有结束时，界面将无法处理其他请求。</p>
<p>现在有一个按钮，如果我们设置它的 onclick 事件为一个死循环，那么当这个按钮按下，整个网页将失去响应。这叫做<strong>阻塞</strong>。</p>
<p>为了避免这种情况的发生，我们常常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，比如读取一个大文件或者发出一个网络请求。因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。</p>
<p>为了解决这个问题，JavaScript 中的异步操作函数往往通过回调函数来实现异步任务的结果处理。</p>
<h2 id="js是单线程的"><a href="#js是单线程的" class="headerlink" title="js是单线程的"></a>js是单线程的</h2><p><strong>JavaScript的单线程</strong>，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p>
<p>一个<strong>线程</strong>是一个基本的处理过程，程序用它来完成任务。每个线程一次只能执行一个任务:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Task A --&gt; Task B --&gt; Task C</span><br></pre></td></tr></table></figure>

<p>每个任务顺序执行，只有前面的结束了，后面的才能开始。</p>
<p><strong>支持多线程的编程语言</strong>可以使用计算机的多个内核，同时完成多个任务:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread 1: Task A --&gt; Task B</span><br><span class="line">Thread 2: Task C --&gt; Task D</span><br></pre></td></tr></table></figure>

<h2 id="WebWorker"><a href="#WebWorker" class="headerlink" title="WebWorker"></a>WebWorker</h2><p>当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。</p>
<p>web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。</p>
<p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web workers</a> 可以把一些任务交给一个名为worker的单独的线程，这样就可以同时运行多个JavaScript代码块。一般来说，用一个worker来运行一个耗时的任务，主线程就可以处理用户的交互（避免了阻塞）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Main thread: Task A --&gt; Task C</span><br><span class="line">Worker thread: Expensive task B</span><br></pre></td></tr></table></figure>

<p>下面的代码检测是否存在 worker，如果不存在，- 它会创建一个新的 web worker 对象，然后运行 “demo_workers.js” 中的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(w)==<span class="string">&quot;undefined&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    w=<span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;demo_workers.js&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们就可以从 web worker 发生和接收消息了。</p>
<p>向 web worker 添加一个 “onmessage” 事件监听器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">w.<span class="property">onmessage</span>=<span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerHTML</span>=event.<span class="property">data</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当我们创建 web worker 对象后，它会继续监听消息（即使在外部脚本完成之后）直到其被终止为止。</p>
<p>如需终止 web worker，并释放浏览器&#x2F;计算机资源，请使用 terminate() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">w.<span class="title function_">terminate</span>();</span><br></pre></td></tr></table></figure>

<h3 id="WebWorker的局限性"><a href="#WebWorker的局限性" class="headerlink" title="WebWorker的局限性"></a>WebWorker的局限性</h3><p>Webworker不能访问DOM，无法对UI进行更新。</p>
<p>虽然在worker里面运行的代码不会产生阻塞，但是基本上还是同步的。当一个函数依赖于几个在它之前运行的过程的结果，这就会成为问题。</p>
<ol>
<li>&#96;&#96;&#96;<br>Main thread: Task A –&gt; Task B<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   在这种情况下，比如说Task A 正在从服务器上获取一个图片之类的资源，Task B 准备在图片上加一个滤镜。如果开始运行Task A 后立即尝试运行Task B，你将会得到一个错误，因为图像还没有获取到。</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   Main thread: Task A --&gt; Task B --&gt; |Task D|</span><br><span class="line">   Worker thread: Task C -----------&gt; |      |</span><br></pre></td></tr></table></figure>

在这种情况下，假设Task D 要同时使用 Task B 和Task C的结果，如果我们能保证这两个结果同时提供，程序可能正常运行，但是这不太可能。如果Task D 尝试在其中一个结果尚未可用的情况下就运行，程序就会抛出一个错误。</li>
</ol>
<p>所以需要像下面这样异步运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Main thread: Task A                   Task B</span><br><span class="line">    Promise:      |__async operation__|</span><br></pre></td></tr></table></figure>

<h1 id="异步JS"><a href="#异步JS" class="headerlink" title="异步JS"></a>异步JS</h1><p>一个异步过程通常是这样的：</p>
<p>主线程发起一个异步请求，相应的工作线程接收请求并告知主线程已收到(异步函数返回)；主线程可以继续执行后面的代码，同时工作线程执行异步任务；工作线程完成工作后，通知主线程；主线程收到通知后，执行一定的动作(调用回调函数)。</p>
<p>同步JS的情况：每一个操作在执行的时候，其他任何事情都没有发生 — 网页的渲染暂停。任何时候只能做一件事情, 只有一个主线程，其他的事情都阻塞了，直到前面的操作完成。</p>
<h2 id="异步callbacks回调函数"><a href="#异步callbacks回调函数" class="headerlink" title="异步callbacks回调函数"></a>异步callbacks回调函数</h2><p>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。</p>
<p>在JavaScript中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个<strong>作为参数的函数</strong>就是回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的print就是回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2, callback</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">	<span class="title function_">callback</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, print);		<span class="comment">//=&gt;3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2, callback</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">	<span class="title function_">callback</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">function</span>(<span class="params">sum</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(sum);		<span class="comment">//=&gt;3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li><p>不会立刻执行：作为参数传给一个函数时，传入的只是函数的定义而不会立刻执行，在调用它的函数中需要()运算符的调用才能执行</p>
</li>
<li><p>闭包：回调函数是闭包，能够访问外面的变量</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A=<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;<span class="title function_">alert</span>(x)&#125;;</span><br><span class="line">B=<span class="function">(<span class="params">callback</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> y=<span class="number">1</span>;</span><br><span class="line"><span class="title function_">callback</span>(y)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">B</span>(A);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行前最好确认是个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2, callback</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">		<span class="title function_">callback</span>(sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this的执行上下文：上下文不是它自身的上下文，而是调用它的函数所在的上下文</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add的上下文指向的是window，所以sum赋值给window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">sum</span> = num1 + num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2, callback</span>)&#123;</span><br><span class="line">	<span class="title function_">callback</span>(num1, num2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>, obj.<span class="property">add</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sum</span>);			<span class="comment">//=&gt;0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">sum</span>);		<span class="comment">//=&gt;3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过apply解决</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">sum</span> = num1 + num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2, callbackObj, callback</span>)&#123;</span><br><span class="line">	callback.<span class="title function_">apply</span>(callbackObj, [ num1, num2 ]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>, obj, obj.<span class="property">add</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sum</span>);			<span class="comment">//=&gt;3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">sum</span>);		<span class="comment">//=&gt;undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>允许传递多个回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">successCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Do stuff before send</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">successCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Do stuff if success message received</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Do stuff upon completion</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Do stuff if error received</span></span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://fiddle.jshell.net/favicon.png&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: successCallback,</span><br><span class="line">    <span class="attr">complete</span>: completeCallback,</span><br><span class="line">    <span class="attr">error</span>: errorCallback</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>回调地狱：一个回调函数中可以嵌入另一个回调函数，对于这种情况出现多层嵌套时，代码会难以阅读和维护，这个时候可以采用命名回调函数的方式调用，或者采用模块化管理函数，也可以用promise模式编程。</p>
</li>
</ol>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>DRY，避免重复代码。</li>
<li>可以将通用的逻辑抽象。</li>
<li>加强代码可维护性。</li>
<li>加强代码可读性。</li>
<li>分离专职的函数。</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>异步编程。</li>
<li>事件监听、处理。</li>
<li>setTimeout、setInterval方法。</li>
<li>通用功能，简化逻辑。</li>
</ol>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>请注意，不是所有的回调函数都是异步的 — 有一些是同步的。一个例子就是使用Array.prototype.forEach()来遍历数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gods = [<span class="string">&#x27;Apollo&#x27;</span>, <span class="string">&#x27;Artemis&#x27;</span>, <span class="string">&#x27;Ares&#x27;</span>, <span class="string">&#x27;Zeus&#x27;</span>];</span><br><span class="line"></span><br><span class="line">gods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">eachName, index</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&#x27;. &#x27;</span> + eachName);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol>
<li>回调地狱</li>
<li>每层嵌套都需要故障回调，而Promise只需要一个catch</li>
<li>异步回调不是很优雅。</li>
<li>Promise回调总是按照它们放在事件队列中的严格顺序调用;异步回调不是。</li>
<li>当传入到一个第三方库时，异步回调对函数如何执行失去完全控制。</li>
</ol>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var timeoutID = setTimeout(function[, delay, arg1, arg2, ...]);</span><br><span class="line">var timeoutID = setTimeout(function[, delay]);</span><br><span class="line">var timeoutID = setTimeout(code[, delay]);</span><br></pre></td></tr></table></figure>

<p>指定的时间（或延迟）不能保证在指定的确切时间之后执行，而是<strong>最短的延迟执行时间</strong>。在主线程上的堆栈为空之前，传递给这些函数的回调将无法运行。</p>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等待两秒钟后显示alert内容</span></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello, Mr. Universe!&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非匿名函数</span></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello, Mr. Universe!&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立定义的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello Mr. Universe!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="built_in">setTimeout</span>(sayHi, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">who</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + who + <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myGreeting = <span class="built_in">setTimeout</span>(sayHi, <span class="number">2000</span>, <span class="string">&#x27;Mr. Universe&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除超时</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(myGreeting);</span><br></pre></td></tr></table></figure>

<p>使用0用作setTimeout()的回调函数会立刻执行，但是在主线程代码运行之后执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先输出Hello后输出World</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;World&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><p>这与<code>setTimeout()</code>的工作方式非常相似，只是作为第一个参数传递给它的函数，<strong>重复</strong>执行的时间不少于第二个参数给出的毫秒数，<strong>而不是一次执行</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每隔1000毫秒，即1秒显示当前时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displayTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="keyword">let</span> time = date.<span class="title function_">toLocaleTimeString</span>();</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>).<span class="property">textContent</span> = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createClock = <span class="built_in">setInterval</span>(displayTime, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除interval</span></span><br><span class="line"><span class="built_in">clearInterval</span>(myInterval);</span><br></pre></td></tr></table></figure>

<h3 id="重复运行相同代码的方法"><a href="#重复运行相同代码的方法" class="headerlink" title="重复运行相同代码的方法"></a>重复运行相同代码的方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setTimeout递归实现</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="built_in">setTimeout</span>(run, <span class="number">100</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setInterval</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>两者区别：</p>
<ul>
<li>递归 <code>setTimeout()</code> 保证执行之间的延迟相同，例如在上述情况下为100ms。 代码将运行，然后在它再次运行之前等待100ms，因此无论代码运行多长时间，间隔都是相同的。</li>
<li>使用 <code>setInterval()</code> 的示例有些不同。 我们选择的间隔包括执行我们想要运行的代码所花费的时间。假设代码需要40毫秒才能运行 - 然后间隔最终只有60毫秒。</li>
<li>当递归使用 <code>setTimeout()</code> 时，每次迭代都可以在运行下一次迭代之前计算不同的延迟。 换句话说，第二个参数的值可以指定在再次运行代码之前等待的不同时间（以毫秒为单位）。</li>
<li><strong>当你的代码有可能比你分配的时间间隔，花费更长时间运行时</strong>，最好使用递归的 <code>setTimeout()</code> - 这将使执行之间的时间间隔保持不变，无论代码执行多长时间，你不会得到错误。</li>
</ul>
<h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame()"></a>requestAnimationFrame()</h2><p><code>requestAnimationFrame()</code> 是一个专门的循环函数，旨在浏览器中高效运行动画。它基本上是现代版本的<code>setInterval()</code> —— 它在浏览器重新加载显示内容之前执行指定的代码块，从而允许动画以适当的帧速率运行，不管其运行的环境如何。</p>
<p>使用 <code>setTimeout</code> 或 <code>setInterval</code> 来执行动画之类的视觉变化，但这种做法的问题是，回调将在帧中的某个时点运行，可能刚好在末尾，而这可能经常会使我们丢失帧，导致卡顿。</p>
<p><img src="https://developers.google.com/web/fundamentals/performance/rendering/images/optimize-javascript-execution/settimeout.jpg?hl=zh-cn" alt="setTimeout 导致浏览器丢失帧。"></p>
<p>常见用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// Drawing code goes here</span></span><br><span class="line">   <span class="title function_">requestAnimationFrame</span>(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">draw</span>();</span><br></pre></td></tr></table></figure>

<p><code>requestAnimationFrame()</code> 总是试图尽可能接近60帧&#x2F;秒的值，当然有时这是不可能的如果你有一个非常复杂的动画，你是在一个缓慢的计算机上运行它，你的帧速率将更少。</p>
<p>如果使用setInterval代替以上代码：另一方面<code>setInterval()</code>需要指定间隔。我们通过公式1000毫秒&#x2F;60Hz得出17的最终值，然后将其四舍五入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// Drawing code goes here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(draw, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//撤销</span></span><br><span class="line"><span class="title function_">cancelAnimationFrame</span>(rAF);</span><br></pre></td></tr></table></figure>

<h3 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h3><p>无法使用<code>requestAnimationFrame（）</code>选择特定的帧速率。如果需要以较慢的帧速率运行动画，则需要使用<code>setInterval（）</code>或递归的<code>setTimeout（）</code>。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 是一个 ECMAScript 6 提供的类，目的是更加优雅地书写复杂的异步任务。Promise对象用于表示一个异步操作的最终完成 (或失败)及其结果值。</p>
<p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p>
<ul>
<li><em><strong>待定（pending）</strong></em>: 初始状态，既没有被兑现，也没有被拒绝。在创建Promise时候的状态。</li>
<li><em><strong>已兑现（fulfilled）</strong></em>: 意味着操作成功完成。它返回一个值，可以通过将<code>.then()</code>块链接到promise链的末尾来访问该值。<code> .then()</code>块中的执行程序函数将包含promise的返回值。</li>
<li><em><strong>已拒绝（rejected）</strong></em>: 意味着操作失败。它返回一个原因（<strong>reason</strong>），一条错误消息，说明为什么拒绝promise。可以通过将<code>.catch()</code>块链接到promise链的末尾来访问此原因。</li>
</ul>
<p>如果一个 promise 已经<strong>被兑现（fulfilled）</strong>或<strong>被拒绝（rejected）</strong>，那么我们也可以说它处于<em><strong>已敲定（settled）</strong></em>状态。<em><strong>已决议（resolved）</strong></em>，它表示 promise 已经处于**已敲定(settled)**状态，或者为了匹配另一个 promise 的状态被”锁定”了。</p>
<p>因为 <code>Promise.prototype.then</code> 和 <code>Promise.prototype.catch</code> 方法返回的是 promise， 所以它们可以被链式调用。</p>
<p><img src="https://mdn.mozillademos.org/files/8633/promises.png" alt="img"></p>
<h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>我们可以用 <code>promise.then()</code>，<code>promise.catch()</code> 和 <code>promise.finally()</code> 这些方法将进一步的操作与一个变为已敲定状态的 promise 关联起来。这些方法还会返回一个新生成的 promise 对象，这个对象可以被非强制性的用来做链式调用，就像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise =</span><br><span class="line">  (<span class="keyword">new</span> <span class="title class_">Promise</span>(myExecutorFunc))</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledA,handleRejectedA)</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledB,handleRejectedB)</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledC,handleRejectedC);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者，这样可能会更好...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myPromise =</span><br><span class="line">  (<span class="keyword">new</span> <span class="title class_">Promise</span>(myExecutorFunc))</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledA)</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledB)</span><br><span class="line">  .<span class="title function_">then</span>(handleFulfilledC)</span><br><span class="line">  .<span class="title function_">catch</span>(handleRejectedAny);</span><br></pre></td></tr></table></figure>

<p>任何不是 <code>throw</code> 的终止都会创建一个”已决议（resolved）”状态，而以 <code>throw</code> 终止则会创建一个”已拒绝”状态。</p>
<p>当 <code>.then()</code> 中缺少能够返回 promise 对象的函数时，链式调用就直接继续进行下一环操作。因此，链式调用可以在最后一个 <code>.catch()</code> 之前把所有的 <code>handleRejection</code> 都省略掉。类似地， <code>.catch()</code> 其实只是没有给 <code>handleFulfilled</code> 预留参数位置的 <code>.then()</code> 而已。</p>
<p>链式调用中的 promise 们就像俄罗斯套娃一样，是嵌套起来的，但又像是一个栈，每个都必须从顶端被弹出。链式调用中的第一个 promise 是嵌套最深的一个，也将是第一个被弹出的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(promise D, (promise C, (promise B, (promise A) ) ) )</span><br></pre></td></tr></table></figure>

<p>对于下面的代码，<code>promiseA</code> 向”已敲定”（”settled”）状态的过渡会导致两个实例的 <code>.then</code> 都被调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">new</span> <span class="title class_">Promise</span>(myExecutorFunc);</span><br><span class="line"><span class="keyword">const</span> promiseB = promiseA.<span class="title function_">then</span>(handleFulfilled1, handleRejected1);</span><br><span class="line"><span class="keyword">const</span> promiseC = promiseA.<span class="title function_">then</span>(handleFulfilled2, handleRejected2); </span><br></pre></td></tr></table></figure>

<p>一个已经处于”已敲定”（”settled”）状态的 promise 也可以接收操作。在那种情况下，（如果没有问题的话，）这个操作会被作为第一个异步操作被执行。注意，所有的 promise 都一定是异步的。因此，一个已经处于”已敲定”（”settled”）状态的 promise 中的操作只有 promise 链式调用的栈被清空了和一个事件循环过去了之后才会被执行。这种效果跟 <code>setTimeout(action, 10)</code> 特别相似。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseA = <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="function">(<span class="params">resolutionFunc,rejectionFunc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolutionFunc</span>(<span class="number">777</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 这时，&quot;promiseA&quot; 已经被敲定了。</span></span><br><span class="line">promiseA.<span class="title function_">then</span>( <span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;asynchronous logging has val:&quot;</span>,val) );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;immediate logging&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// produces output in this order:</span></span><br><span class="line"><span class="comment">// immediate logging</span></span><br><span class="line"><span class="comment">// asynchronous logging has val: 777</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise的创建"><a href="#Promise的创建" class="headerlink" title="Promise的创建"></a>Promise的创建</h3><p><code>Promise</code> 对象是由关键字 <code>new</code> 及其构造函数来创建的。该构造函数会把一个叫做“处理器函数”（executor function）的函数作为它的参数。这个“处理器函数”接受两个函数——<code>resolve</code> 和 <code>reject</code> ——作为其参数。当异步任务顺利完成且返回结果值时，会调用 <code>resolve</code> 函数；而当异步任务失败且返回失败原因（通常是一个错误对象）时，会调用<code>reject</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myFirstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ?做一些异步操作，最终会调用下面两者之一:</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//   resolve(someValue); // fulfilled</span></span><br><span class="line">  <span class="comment">// ?或</span></span><br><span class="line">  <span class="comment">//   reject(&quot;failure reason&quot;); // rejected</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>想要某个函数拥有promise功能，只需让其返回一个promise即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAsyncFunction</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(xhr.<span class="property">statusText</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFirstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span></span><br><span class="line">    <span class="comment">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;成功!&quot;</span>); <span class="comment">//代码正常执行！</span></span><br><span class="line">    &#125;, <span class="number">250</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myFirstPromise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">successMessage</span>)&#123;</span><br><span class="line">    <span class="comment">//successMessage的值是上面调用resolve(...)方法传入的值.</span></span><br><span class="line">    <span class="comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Yay! &quot;</span> + successMessage);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h3><p>resolve 和 reject 都是函数，其中调用 resolve 代表一切正常，reject 是出现异常时所调用的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="title function_">reject</span>(<span class="string">&quot;Divide zero&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="title function_">resolve</span>(a / b);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a / b = &quot;</span> + value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// a / b = 0</span></span><br><span class="line"><span class="comment">// End</span></span><br></pre></td></tr></table></figure>

<p>.then() 可以将参数中的函数添加到当前 Promise 的正常执行序列，.catch() 则是设定 Promise 的异常处理序列，.finally() 是在 Promise 执行的最后一定会执行的序列。 .then() 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2222</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3333</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;An error&quot;</span>;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1111</span></span><br><span class="line"><span class="comment">// 2222</span></span><br><span class="line"><span class="comment">// 3333</span></span><br><span class="line"><span class="comment">// An error</span></span><br></pre></td></tr></table></figure>

<h3 id="回调函数造成的困难"><a href="#回调函数造成的困难" class="headerlink" title="回调函数造成的困难"></a>回调函数造成的困难</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="title function_">placeOrder</span>(toppings, <span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">    <span class="title function_">collectOrder</span>(order, <span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">      <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br></pre></td></tr></table></figure>

<p>这很麻烦且难以阅读（通常称为“回调地狱”），需要多次调用<code>failureCallback()</code>（每个嵌套函数一次），还有其他问题。</p>
<p>使用promise修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">placeOrder</span>(toppings);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">collectOrder</span>(order);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">  <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure>

<p>promise与事件监听器类似，但有一些差异：</p>
<ul>
<li>一个promise只能成功或失败一次。它不能成功或失败两次，并且一旦操作完成，它就无法从成功切换到失败，反之亦然。</li>
<li>如果promise成功或失败并且你稍后添加成功&#x2F;失败回调，则将调用正确的回调，即使事件发生在较早的时间。</li>
</ul>
<h3 id="缺陷-2"><a href="#缺陷-2" class="headerlink" title="缺陷"></a>缺陷</h3><p>Promise链可能很复杂，难以解析。如果你嵌套了许多promises，你最终可能会遇到类似的麻烦来回调地狱。</p>
<p>最好使用promises的链功能，这样使用更平顺，更易于解析的结构。</p>
<h3 id="Promises-对比-callbacks"><a href="#Promises-对比-callbacks" class="headerlink" title="Promises 对比 callbacks"></a>Promises 对比 callbacks</h3><p>promises与旧式callbacks有一些相似之处。它们本质上是一个返回的对象，您可以将回调函数附加到该对象上，而不必将回调作为参数传递给另一个函数。</p>
<p>然而，<code>Promise</code>是专门为异步操作而设计的，与旧式回调相比具有许多优点:</p>
<ul>
<li>您可以使用多个then()操作将多个异步操作链接在一起，并将其中一个操作的结果作为输入传递给下一个操作。这种链接方式对回调来说要难得多，会使回调以混乱的“回调地狱”告终。(也称为末日金字塔)。</li>
<li><code>Promise</code>总是严格按照它们放置在事件队列中的顺序调用。</li>
<li>错误处理要好得多——所有的错误都由块末尾的一个.catch()块处理，而不是在“金字塔”的每一层单独处理。</li>
</ul>
<h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><p>它们是基于promises的语法糖，使异步代码更易于编写和阅读。通过使用它们，异步代码看起来更像是老式同步代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">delay, message</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Promise</span></span><br><span class="line"><span class="title function_">print</span>(<span class="number">1000</span>, <span class="string">&quot;First&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">print</span>(<span class="number">4000</span>, <span class="string">&quot;Second&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">print</span>(<span class="number">3000</span>, <span class="string">&quot;Third&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">print</span>(<span class="number">1000</span>, <span class="string">&quot;First&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">print</span>(<span class="number">4000</span>, <span class="string">&quot;Second&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">print</span>(<span class="number">3000</span>, <span class="string">&quot;Third&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理异常</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&quot;Some error&quot;</span>; <span class="comment">// 或者 reject(&quot;Some error&quot;)</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="comment">// 会输出 Some error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常的返回值</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;Return value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncFunc</span>();</span><br></pre></td></tr></table></figure>

<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function name([param[, param[, ... param]]]) &#123; statements &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>name: 函数名称。</li>
<li>param: 要传递给函数的参数的名称。</li>
<li>statements: 函数体语句。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。这个promise要么会通过一个由async函数返回的值被解决，要么会通过一个从async函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;helloAsync&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">helloAsync</span>())  <span class="comment">// Promise &#123;&lt;resolved&gt;: &quot;helloAsync&quot;&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_">helloAsync</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(v);         <span class="comment">// helloAsync</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</p>
<p>await 关键字仅在 async function 中有效。如果在 async function 函数体外使用 await ，你只会得到一个语法错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">       &#125;, <span class="number">1000</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">testAwait</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloAsync&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">helloAsync</span>();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAfter2Seconds</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;resolved&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncCall</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;calling&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">resolveAfter2Seconds</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="comment">// expected output: &quot;resolved&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncCall</span>();</span><br><span class="line"><span class="comment">// 运行后立刻输出calling，两秒钟之后输出resolved</span></span><br></pre></td></tr></table></figure>

<p>async函数可能包含0个或者多个<code>await</code>表达式。await表达式会暂停整个async函数的执行进程并出让其控制权，只有当其等待的基于promise的异步操作被兑现或被拒绝之后才会恢复进程。promise的解决值会被当作该await表达式的返回值。使用<code>async</code> &#x2F; <code>await</code>关键字就可以在异步代码中使用普通的<code>try</code> &#x2F; <code>catch</code>代码块。</p>
<p><code>async</code>&#x2F;<code>await</code>的目的为了简化使用基于promise的API时所需的语法。<code>async</code>&#x2F;<code>await</code>的行为就好像搭配使用了生成器和promise。</p>
<p><strong>async函数一定会返回一个promise对象。如果一个async函数的返回值看起来不是promise，那么它将会被隐式地包装在一个promise中。</strong></p>
<p>如下代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>async函数的函数体可以被看作是由0个或者多个await表达式分割开来的。从第一行代码直到（并包括）第一个await表达式（如果有的话）都是同步运行的。这样的话，一个不含await表达式的async函数是会同步运行的。然而，如果函数体内有一个await表达式，async函数就一定会异步执行。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="literal">undefined</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在await表达式之后的代码可以被认为是存在在链式调用的then回调中，多个await表达式都将加入链式调用的then回调中，返回值将作为最后一个then回调的返回值。</p>
<p>在接下来的例子中，我们将使用await执行两次promise，整个<code>foo</code>函数的执行将会被分为三个阶段。</p>
<ol>
<li><code>foo</code>函数的第一行将会同步执行，await将会等待promise的结束。然后暂停通过<code>foo</code>的进程，并将控制权交还给调用<code>foo</code>的函数。</li>
<li>一段时间后，当第一个promise完结的时候，控制权将重新回到foo函数内。示例中将会将<code>1</code>（promise状态为fulfilled）作为结果返回给await表达式的左边即<code>result1</code>。接下来函数会继续进行，到达第二个await区域，此时<code>foo</code>函数的进程将再次被暂停。</li>
<li>一段时间后，同样当第二个promise完结的时候，<code>result2</code>将被赋值为<code>2</code>，之后函数将会正常同步执行，将默认返回<code>undefined</code> 。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> result1 = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>)))</span><br><span class="line">   <span class="keyword">const</span> result2 = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;2&#x27;</span>)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p>注意：promise链不是一次就构建好的，相反，promise链是分阶段构造的，因此在处理异步函数时必须注意对错误函数的处理。</p>
<p>例如，在下面的代码中，在promise链上配置了<code>.catch</code>处理程序，将抛出未处理的promise错误。这是因为<code>p2</code>返回的结果不会被await处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>), <span class="number">1000</span>))</span><br><span class="line">   <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_,reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;2&#x27;</span>), <span class="number">500</span>))</span><br><span class="line">   <span class="keyword">const</span> results = [<span class="keyword">await</span> p1, <span class="keyword">await</span> p2] <span class="comment">// 不推荐使用这种方式，请使用 Promise.all或者Promise.allSettled </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// 捕捉所有的错误...</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> resolveAfter2Seconds = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;starting slow promise&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;slow promise is done&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resolveAfter1Second = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;starting fast promise&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;fast&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fast promise is done&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在sequentialStart中，程序在第一个await停留了2秒，然后又在第二个await停留了1秒。直到第一个计时器结束后，第二个计时器才被创建。程序需要3秒执行完毕。</span></span><br><span class="line"><span class="keyword">var</span> sequentialStart = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==SEQUENTIAL START==&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Execution gets here almost instantly</span></span><br><span class="line">  <span class="keyword">const</span> slow = <span class="keyword">await</span> <span class="title function_">resolveAfter2Seconds</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(slow); <span class="comment">// 2. this runs 2 seconds after 1.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fast = <span class="keyword">await</span> <span class="title function_">resolveAfter1Second</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fast); <span class="comment">// 3. this runs 3 seconds after 1.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 concurrentStart中，两个计时器被同时创建，然后执行await。这两个计时器同时运行，这意味着程序完成运行只需要2秒，而不是3秒,即最慢的计时器的时间。</span></span><br><span class="line"><span class="comment">// 但是 await 仍旧是顺序执行的，第二个 await 还是得等待第一个执行完。在这个例子中，这使得先运行结束的输出出现在最慢的输出之后。</span></span><br><span class="line"><span class="keyword">var</span> concurrentStart = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==CONCURRENT START with await==&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> slow = <span class="title function_">resolveAfter2Seconds</span>(); <span class="comment">// starts timer immediately</span></span><br><span class="line">  <span class="keyword">const</span> fast = <span class="title function_">resolveAfter1Second</span>(); <span class="comment">// starts timer immediately</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. Execution gets here almost instantly</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> slow); <span class="comment">// 2. this runs 2 seconds after 1.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> fast); <span class="comment">// 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concurrentPromise = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==CONCURRENT START with Promise.all==&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">resolveAfter2Seconds</span>(), <span class="title function_">resolveAfter1Second</span>()]).<span class="title function_">then</span>(<span class="function">(<span class="params">messages</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(messages[<span class="number">0</span>]); <span class="comment">// slow</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(messages[<span class="number">1</span>]); <span class="comment">// fast</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你希望并行执行两个或更多的任务，你必须像在parallel中一样使用await Promise.all([job1(), job2()])。</span></span><br><span class="line"><span class="keyword">var</span> parallel = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==PARALLEL with await Promise.all==&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Start 2 &quot;jobs&quot; in parallel and wait for both of them to complete</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      (<span class="title function_">async</span>()=&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">resolveAfter2Seconds</span>()))(),</span><br><span class="line">      (<span class="title function_">async</span>()=&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">resolveAfter1Second</span>()))()</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function does not handle errors. See warning below!</span></span><br><span class="line"><span class="keyword">var</span> parallelPromise = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==PARALLEL with Promise.then==&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolveAfter2Seconds</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(message));</span><br><span class="line">  <span class="title function_">resolveAfter1Second</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">message</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(message));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sequentialStart</span>(); <span class="comment">// after 2 seconds, logs &quot;slow&quot;, then after 1 more second, &quot;fast&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait above to finish</span></span><br><span class="line"><span class="built_in">setTimeout</span>(concurrentStart, <span class="number">4000</span>); <span class="comment">// after 2 seconds, logs &quot;slow&quot; and then &quot;fast&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(concurrentPromise, <span class="number">7000</span>); <span class="comment">// same as concurrentStart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(parallel, <span class="number">10000</span>); <span class="comment">// truly parallel: after 1 second, logs &quot;fast&quot;, then after 1 more second, &quot;slow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// wait again</span></span><br><span class="line"><span class="built_in">setTimeout</span>(parallelPromise, <span class="number">13000</span>); <span class="comment">// same as parallel</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220221110944.png" alt="image-20220221110944528"></p>
<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220221111032.png" alt="image-20220221111032889"></p>
<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220221111147.png" alt="image-20220221111147473"></p>
<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220221111203.png" alt="image-20220221111203842"></p>
<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220221111226.png" alt="image-20220221111226401"></p>
<p><strong>async&#x2F;await和Promise#then对比以及错误处理:</strong> <strong>警告：</strong></p>
<p>大多数async函数也可以使用Promises编写。但是，在错误处理方面，async函数更容易捕获异常错误</p>
<p>上面例子中的<code>concurrentStart</code>函数和<code>concurrentPromise</code>函数在功能上都是等效的。在<code>concurrentStart</code>函数中，如果任一<code>await</code>ed调用失败，它将自动捕获异常，async函数执行中断，并通过隐式返回Promise将错误传递给调用者。</p>
<p>在Promise例子中这种情况同样会发生，该函数必须负责返回一个捕获函数完成的<code>Promise</code>。在<code>concurrentPromise</code>函数中，这意味着它从<code>Promise.all([]).then()</code>返回一个Promise。事实上，在此示例的先前版本忘记了这样做！</p>
<p>但是，async函数仍有可能然可能错误地忽略错误。<br>以<code>parallel</code> async函数为例。 如果它没有等待<code>await</code>（或返回）<code>Promise.all([])</code>调用的结果，则不会传播任何错误。<br>虽然<code>parallelPromise</code>函数示例看起来很简单，但它根本不会处理错误！ 这样做需要一个类似于<code>return ``Promise.all([])</code>处理方式。</p>
<h4 id="async重写Promise链"><a href="#async重写Promise链" class="headerlink" title="async重写Promise链"></a>async重写Promise链</h4><p>返回 <code>Promise</code>的 API 将会产生一个 promise 链，它将函数肢解成许多部分。例如下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getProcessedData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">downloadData</span>(url) <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">downloadFallbackData</span>(url)  <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">processDataInWorker</span>(v); <span class="comment">// 返回一个 promise 对象</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以重写为单个async函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getProcessedData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = <span class="keyword">await</span> <span class="title function_">downloadData</span>(url);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    v = <span class="keyword">await</span> <span class="title function_">downloadFallbackData</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">processDataInWorker</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，在上述示例中，<code>return</code> 语句中没有 <code>await</code> 操作符，因为 <code>async function</code> 的返回值将被隐式地传递给 <code>Promise.resolve</code>。</p>
<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p><strong>await 只在异步函数里面才起作用</strong>。用于等待一个异步对象。它可以放在任何异步的，基于 promise 的函数之前。它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[return_value] = await expression;</span><br></pre></td></tr></table></figure>

<ul>
<li>expression: 一个 Promise 对象或者任何要等待的值。</li>
</ul>
<h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。</p>
<p>如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span> (x) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">await</span> testAwait (<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br><span class="line">&#125;</span><br><span class="line">helloAsync ();</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<p>正常情况下，await 命令后面是一个 Promise 对象，它也可以跟其他值，如字符串，布尔值，数值以及普通函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testAwait</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;testAwait&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">helloAsync</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">testAwait</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;helloAsync&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">helloAsync</span>();</span><br><span class="line"><span class="comment">// testAwait</span></span><br><span class="line"><span class="comment">// helloAsync</span></span><br></pre></td></tr></table></figure>

<p>await针对所跟不同表达式的处理方式：</p>
<ul>
<li>Promise 对象：await 会暂停执行，等待 Promise 对象 resolve，然后恢复 async 函数的执行并返回解析值。若 Promise 正常处理(fulfilled)，其回调的resolve函数参数作为 await 表达式的值，继续执行 <code>async function</code>。若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</li>
<li>非 Promise 对象：直接返回对应的值。</li>
</ul>
<p>例子：</p>
<p>如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAfter2Seconds</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">await</span> <span class="title function_">resolveAfter2Seconds</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure>

<p>如果该值不是一个 Promise，await 会把该值转换为已正常处理的Promise，然后等待其处理结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="keyword">await</span> <span class="number">20</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f2</span>();</span><br></pre></td></tr></table></figure>

<p>如果 Promise 处理异常，则异常值被抛出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">30</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f3</span>();</span><br></pre></td></tr></table></figure>

<h3 id="缺陷-3"><a href="#缺陷-3" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>您不能在非<code>async</code>函数内或代码的顶级上下文环境中使用<code>await</code>运算符。这有时会导致需要创建额外的函数封包，这在某些情况下会略微令人沮丧。但大部分时间都值得。</li>
<li>浏览器对async &#x2F; await的支持不如promises那样好。如果你想使用async &#x2F; await但是担心旧的浏览器支持，你可以考虑使用<a href="https://babeljs.io/">BabelJS</a> 库 - 这允许你使用最新的JavaScript编写应用程序，让Babel找出用户浏览器需要的更改。</li>
</ul>
<h1 id="资料来源："><a href="#资料来源：" class="headerlink" title="资料来源："></a>资料来源：</h1><ol>
<li><a href="https://www.runoob.com/js/js-async.html">https://www.runoob.com/js/js-async.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous</a></li>
<li><a href="https://blog.51cto.com/u_14209124/2884330">https://blog.51cto.com/u_14209124/2884330</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/67452727">https://zhuanlan.zhihu.com/p/67452727</a></li>
<li><a href="https://segmentfault.com/a/1190000015806981">https://segmentfault.com/a/1190000015806981</a></li>
<li><a href="https://segmentfault.com/a/1190000004322358">https://segmentfault.com/a/1190000004322358</a></li>
<li><a href="https://cnodejs.org/topic/564dd2881ba2ef107f854e0b">https://cnodejs.org/topic/564dd2881ba2ef107f854e0b</a></li>
<li><a href="https://segmentfault.com/q/1010000009532089">https://segmentfault.com/q/1010000009532089</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-cn</a></li>
<li><a href="https://www.runoob.com/js/js-promise.html">https://www.runoob.com/js/js-promise.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li>
<li><a href="https://www.runoob.com/w3cnote/es6-async.html">https://www.runoob.com/w3cnote/es6-async.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
        <tag>TODO</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>关于MySQL数据格式的问题</title>
    <url>/2021/02/08/%E5%85%B3%E4%BA%8EMySQL%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>说明：将已经建好的表字符集转改成 utf8mb4，排序规则改为 utf8mb4_bin<br>命令：alter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin; （将TABLE_NAME替换成你的表名）<br>注意：排序规则不是 utf8mb4_general_ci，而是utf8mb4_bin</p>
<p><img src="https://img-blog.csdnimg.cn/20210208113929699.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dqX25qdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210208114001864.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dqX25qdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210208114031424.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dqX25qdQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习（一）——基础</title>
    <url>/2022/02/16/Vue%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、-Vue介绍"><a href="#一、-Vue介绍" class="headerlink" title="一、 Vue介绍"></a>一、 Vue介绍</h2><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<h3 id="1-1-声明式渲染"><a href="#1-1-声明式渲染" class="headerlink" title="1.1 声明式渲染"></a>1.1 声明式渲染</h3><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">  Counter: &#123;&#123; counter &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">Counter</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#counter&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>现在数据和 DOM 已经被建立了关联，所有东西都是<strong>响应式的</strong>。我们要怎么确认呢？请看下面的示例，其中 <code>counter</code> property 每秒递增，你将看到渲染的 DOM 是如何变化的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span>++</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了文本插值，我们还可以像这样绑定元素的 attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bind-attribute&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AttributeBinding</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;You loaded this page on &#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">AttributeBinding</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#bind-attribute&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“<em>将这个元素节点的 <code>title</code> attribute 和当前活跃实例的 <code>message</code> property 保持一致</em>”。</p>
<h3 id="1-2-处理用户输入"><a href="#1-2-处理用户输入" class="headerlink" title="1.2 处理用户输入"></a>1.2 处理用户输入</h3><p>为了让用户和应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在实例中定义的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;event-handling&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>反转 Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventHandling</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">reverseMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="variable language_">this</span>.<span class="property">message</span></span><br><span class="line">        .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        .<span class="title function_">reverse</span>()</span><br><span class="line">        .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">EventHandling</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#event-handling&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意在这个方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</strong></p>
<p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two-way-binding&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TwoWayBinding</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">TwoWayBinding</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#two-way-binding&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-条件与循环"><a href="#1-3-条件与循环" class="headerlink" title="1.3 条件与循环"></a>1.3 条件与循环</h3><p>这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM 的<strong>结构</strong>。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入&#x2F;更新&#x2F;移除元素时自动应用<a href="https://v3.cn.vuejs.org/guide/transitions-enterleave.html">过渡效果</a>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conditional-rendering&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ConditionalRendering</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">seen</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">ConditionalRendering</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#conditional-rendering&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list-rendering&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ListRendering</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">todos</span>: [</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">ListRendering</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#list-rendering&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-组件化应用构建"><a href="#1-4-组件化应用构建" class="headerlink" title="1.4 组件化应用构建"></a>1.4 组件化应用构建</h3><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p>
<p><img src="https://v3.cn.vuejs.org/images/components.png" alt="Component Tree"></p>
<p>在 Vue 中，组件本质上是一个具有预定义选项的实例。在 Vue 中注册组件很简单：如对 <code>app</code> 对象所做的那样创建一个组件对象，并将其定义在父级组件的 <code>components</code> 选项中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TodoItem</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;li&gt;This is a todo&lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Vue 应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">TodoItem</span> <span class="comment">// 注册一个新组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ... <span class="comment">// 组件的其它 property</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载 Vue 应用</span></span><br><span class="line">app.<span class="title function_">mount</span>(...)</span><br></pre></td></tr></table></figure>

<p>现在，你可以将其放到另一个组件的模板中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 创建一个 todo-item 组件实例 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能将数据从父组件传入子组件才对。让我们来修改一下组件的定义，使之能够接受一个 <a href="https://v3.cn.vuejs.org/guide/component-basics.html#%E9%80%9A%E8%BF%87-prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE">prop</a>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TodoItem</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们可以使用 <code>v-bind</code> 指令将待办项传到循环输出的每个组件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todo-list-app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="comment">      作详细解释。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TodoItem</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TodoList</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">groceryList</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;Vegetables&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Cheese&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Whatever else humans are supposed to eat&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">TodoItem</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">TodoList</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#todo-list-app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们已经设法将应用分割成了两个更小的单元。子单元通过 prop 接口与父单元进行了良好的解耦。我们现在可以进一步改进 <code>&lt;todo-item&gt;</code> 组件，提供一个更为复杂的模板和逻辑，而不会影响到父应用。</p>
<p>在一个大型应用中，有必要将整个应用程序划分为多个组件，以使开发更易管理。在<a href="https://v3.cn.vuejs.org/guide/component-basics.html">后续教程</a>中我们将详述组件，不过这里有一个 (假想的) 例子，以展示使用了组件的应用模板是什么样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-sidebar</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sidebar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app-content</span>&gt;</span><span class="tag">&lt;/<span class="name">app-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">app-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-1-与自定义元素的关系"><a href="#1-4-1-与自定义元素的关系" class="headerlink" title="1.4.1 与自定义元素的关系"></a>1.4.1 与自定义元素的关系</h4><p>你可能已经注意到 Vue 组件与<strong>自定义元素</strong>非常类似——它是 <a href="https://www.w3.org/wiki/WebComponents/">Web Components 规范</a>的一部分。确实，Vue 的组件设计 (如插槽 API) 在浏览器原生支持该规范前就部分受到了它的影响。</p>
<p>它们之间主要的不同在于，Vue 组件的数据模型是作为框架的一部分而设计的，而该框架为构建复杂应用提供了很多必要的附加功能。例如响应式模板和状态管理——这两者都没有被该规范所覆盖。</p>
<p>Vue 也为创建和使用自定义元素提供了很好的支持。关于其更多细节，请浏览 <a href="https://v3.cn.vuejs.org/guide/web-components.html">Vue 和 Web Components</a> 章节。</p>
<h2 id="二、-应用组件实例"><a href="#二、-应用组件实例" class="headerlink" title="二、 应用组件实例"></a>二、 应用组件实例</h2><h3 id="2-1-创建一个应用实例"><a href="#2-1-创建一个应用实例" class="headerlink" title="2.1 创建一个应用实例"></a>2.1 创建一个应用实例</h3><p>每个 Vue 应用都是通过用 <code>createApp</code> 函数创建一个新的<strong>应用实例</strong>开始的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* 选项 */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>该应用实例是用来在应用中注册“全局”组件的。简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;SearchInput&#x27;</span>, <span class="title class_">SearchInputComponent</span>)</span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="title class_">FocusDirective</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">LocalePlugin</span>)</span><br></pre></td></tr></table></figure>

<p>应用实例暴露的大多数方法都会返回该同一实例，允许链式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line">  .<span class="title function_">component</span>(<span class="string">&#x27;SearchInput&#x27;</span>, <span class="title class_">SearchInputComponent</span>)</span><br><span class="line">  .<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="title class_">FocusDirective</span>)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="title class_">LocalePlugin</span>)</span><br></pre></td></tr></table></figure>

<p>可以在 <a href="https://v3.cn.vuejs.org/api/application-api.html">API 参考</a>中浏览完整的应用 API。</p>
<h3 id="2-2-根组件"><a href="#2-2-根组件" class="headerlink" title="2.2 根组件"></a>2.2 根组件</h3><p>传递给 <code>createApp</code> 的选项用于配置<strong>根组件</strong>。当我们<strong>挂载</strong>应用时，该组件被用作渲染的起点。</p>
<p>一个应用需要被挂载到一个 DOM 元素中。例如，如果你想把一个 Vue 应用挂载到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，应该传入 <code>#app</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">RootComponent</span> = &#123; </span><br><span class="line">  <span class="comment">/* 选项 */</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">RootComponent</span>)</span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>与大多数应用方法不同的是，<code>mount</code> 不返回应用本身。相反，它返回的是根组件实例。</p>
<p>尽管本页面上的所有示例都只需要一个单一的组件就可以，但是大多数的真实应用都是被组织成一个嵌套的、可重用的组件树。举个例子，一个 todo 应用组件树可能是这样的：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Root Component</span><br><span class="line">└─ TodoList</span><br><span class="line">   ├─ TodoItem</span><br><span class="line">   │  ├─ DeleteTodoButton</span><br><span class="line">   │  └─ EditTodoButton</span><br><span class="line">   └─ TodoListFooter</span><br><span class="line">      ├─ ClearTodosButton</span><br><span class="line">      └─ TodoListStatistics</span><br></pre></td></tr></table></figure>

<p>每个组件将有自己的组件实例 <code>vm</code>。对于一些组件，如 <code>TodoItem</code>，在任何时候都可能有多个实例渲染。这个应用中的所有组件实例将共享同一个应用实例。</p>
<p>根组件与其他组件没什么不同，配置选项是一样的，所对应的组件实例行为也是一样的。</p>
<h3 id="2-3-组件实例property"><a href="#2-3-组件实例property" class="headerlink" title="2.3 组件实例property"></a>2.3 组件实例property</h3><p>在 <code>data</code> 中定义的 property 是通过组件实例暴露的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>) <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure>

<p>可以将用户定义的 property 添加到组件实例中，例如 <code>methods</code>，<code>props</code>，<code>computed</code>，<code>inject</code> 和 <code>setup</code>。组件实例的所有 property，无论如何定义，都可以在组件的模板中访问。</p>
<p>Vue 还通过组件实例暴露了一些内置 property，如 <code>$attrs</code> 和 <code>$emit</code>。这些 property 都有一个 <code>$</code> 前缀，以避免与用户定义的 property 名冲突。</p>
<h3 id="2-4-生命周期钩子"><a href="#2-4-生命周期钩子" class="headerlink" title="2.4 生命周期钩子"></a>2.4 生命周期钩子</h3><p>每个组件在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p>比如 <a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#created">created</a> 钩子可以用来在一个实例被创建之后执行代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count is: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">count</span>) <span class="comment">// =&gt; &quot;count is: 1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#mounted">mounted</a>、<a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#updated">updated</a> 和 <a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#unmounted">unmounted</a>。生命周期钩子的 <code>this</code> 上下文指向调用它的当前活动实例。</p>
<p>**不要在选项 property 或回调上使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a><strong>，比如 <code>created: () =&gt; console.log(this.a)</code> 或 <code>vm.$watch(&#39;a&#39;, newValue =&gt; this.myMethod())</code>。</strong>因为箭头函数并没有 <code>this</code>**，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 <code>Uncaught TypeError: Cannot read property of undefined</code> 或 <code>Uncaught TypeError: this.myMethod is not a function</code> 之类的错误。</p>
<h3 id="2-5-生命周期图示"><a href="#2-5-生命周期图示" class="headerlink" title="2.5 生命周期图示"></a>2.5 生命周期图示</h3><p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="实例的生命周期"></p>
<h2 id="三、-模板语法"><a href="#三、-模板语法" class="headerlink" title="三、 模板语法"></a>三、 模板语法</h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层组件实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应性系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p>
<p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="https://v3.cn.vuejs.org/guide/render-function.html">直接写渲染 (render) 函数</a>，使用可选的 JSX 语法。</p>
<h3 id="3-1-插值"><a href="#3-1-插值" class="headerlink" title="3.1 插值"></a>3.1 插值</h3><h4 id="3-1-1-文本"><a href="#3-1-1-文本" class="headerlink" title="3.1.1 文本"></a>3.1.1 文本</h4><p>数据绑定最常见的形式就是使用“Mustache” (双大括号) 语法的文本插值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mustache 标签将会被替代为对应组件实例中 <code>msg</code> property 的值。无论何时，绑定的组件实例上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p>
<p>通过使用 <a href="https://v3.cn.vuejs.org/api/directives.html#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-1-2-原始HTML"><a href="#3-1-2-原始HTML" class="headerlink" title="3.1.2 原始HTML"></a>3.1.2 原始HTML</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用<a href="https://v3.cn.vuejs.org/api/directives.html#v-html"><code>v-html</code> 指令</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">RenderHtmlApp</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">rawHtml</span>: <span class="string">&#x27;&lt;span style=&quot;color: red&quot;&gt;This should be red.&lt;/span&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">RenderHtmlApp</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#example1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220217142258.png" alt="image-20220217142219593"></p>
<p>这个 <code>span</code> 的内容将会被替换成为 <code>rawHtml</code> property 的值，直接作为 HTML——会忽略解析 property 值中的数据绑定。注意，你不能使用 <code>v-html</code> 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。</p>
<p><strong>在你的站点上动态渲染任意的 HTML 是非常危险的，因为它很容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。请只对可信内容使用 HTML 插值，绝不要将用户提供的内容作为插值。</strong></p>
<h4 id="3-1-3-Attribute"><a href="#3-1-3-Attribute" class="headerlink" title="3.1.3 Attribute"></a>3.1.3 Attribute</h4><p>Mustache 语法不能在 HTML attribute 中使用，然而，可以使用 <a href="https://v3.cn.vuejs.org/api/directives.html#v-bind"><code>v-bind</code> 指令</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果绑定的值是 <code>null</code> 或 <code>undefined</code>，那么该 attribute 将不会被包含在渲染的元素上。</p>
<p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>isButtonDisabled</code> 的值是 truthy（真值，不仅仅是<code>true</code>），那么 <code>disabled</code> attribute 将被包含在内。如果该值是一个空字符串，它也会被包括在内，与 <code>&lt;button disabled=&quot;&quot;&gt;</code> 保持一致。对于其他 falsy（虚值，不仅仅是<code>false</code>，除 <code>false</code>、<code>0</code>、<code>-0</code>、<code>0n</code>、<code>&quot;&quot;</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 以外皆为真值）的值，该 attribute 将被省略。</p>
<h4 id="3-1-4-使用JavaScript表达式"><a href="#3-1-4-使用JavaScript表达式" class="headerlink" title="3.1.4 使用JavaScript表达式"></a>3.1.4 使用JavaScript表达式</h4><p>实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  这是语句，不是表达式：--&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流程控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-指令"><a href="#3-2-指令" class="headerlink" title="3.2 指令"></a>3.2 指令</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 和 <code>v-on</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
<p><code>v-if</code> 指令将根据表达式 <code>seen</code> 的值的真假来插入&#x2F;移除 <code>&lt;p&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-参数"><a href="#3-2-1-参数" class="headerlink" title="3.2.1 参数"></a>3.2.1 参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p>
<p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里参数是监听的事件名。</p>
<h4 id="3-2-2-动态参数"><a href="#3-2-2-动态参数" class="headerlink" title="3.2.2 动态参数"></a>3.2.2 动态参数</h4><p>也可以在指令参数中使用 JavaScript 表达式，方法是用方括号括起来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的组件实例有一个 data property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p>
<p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code></p>
<h4 id="3-2-3-修饰符"><a href="#3-2-3-修饰符" class="headerlink" title="3.2.3 修饰符"></a>3.2.3 修饰符</h4><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在接下来对 <a href="https://v3.cn.vuejs.org/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-on</code></a> 和 <a href="https://v3.cn.vuejs.org/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-for</code></a> 等功能的探索中，你会看到修饰符的其它例子。</p>
<h3 id="3-3-缩写"><a href="#3-3-缩写" class="headerlink" title="3.3 缩写"></a>3.3 缩写</h3><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 <a href="https://en.wikipedia.org/wiki/Single-page_application">(SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p>
<h4 id="3-3-1-v-bind缩写"><a href="#3-3-1-v-bind缩写" class="headerlink" title="3.3.1 v-bind缩写"></a>3.3.1 v-bind缩写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-v-on缩写"><a href="#3-3-2-v-on缩写" class="headerlink" title="3.3.2 v-on缩写"></a>3.3.2 v-on缩写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-3-注意事项"><a href="#3-3-3-注意事项" class="headerlink" title="3.3.3 注意事项"></a>3.3.3 注意事项</h4><h5 id="3-3-3-1-对动态参数值约定"><a href="#3-3-3-1-对动态参数值约定" class="headerlink" title="3.3.3.1 对动态参数值约定"></a>3.3.3.1 对动态参数值约定</h5><p>动态参数预期会求出一个字符串，<code>null</code> 例外。这个特殊的 <code>null</code> 值可以用于显式地移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
<h5 id="3-3-3-2-对动态参数表达式约定"><a href="#3-3-3-2-对动态参数表达式约定" class="headerlink" title="3.3.3.2 对动态参数表达式约定"></a>3.3.3.2 对动态参数表达式约定</h5><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这会触发一个编译警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[&#x27;<span class="attr">foo</span>&#x27; + <span class="attr">bar</span>]=<span class="string">&quot;value&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>变通的办法是使用没有空格或引号的表达式，或用<a href="https://v3.cn.vuejs.org/guide/computed.html">计算属性</a>替代这种复杂表达式。</p>
<p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span></span><br><span class="line"><span class="comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">someAttr</span>]=<span class="string">&quot;value&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-3-3-3-JavaScript表达式"><a href="#3-3-3-3-JavaScript表达式" class="headerlink" title="3.3.3.3 JavaScript表达式"></a>3.3.3.3 JavaScript表达式</h5><p>模板表达式都被放在沙盒中，只能访问一个<a href="https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3">受限的全局变量列表</a>，如 <code>Math</code> 和 <code>Date</code>。你不应该在模板表达式中试图访问用户定义的全局变量。</p>
<h2 id="四、-Data-Property和方法"><a href="#四、-Data-Property和方法" class="headerlink" title="四、 Data Property和方法"></a>四、 Data Property和方法</h2><h3 id="4-1-Data-Property"><a href="#4-1-Data-Property" class="headerlink" title="4.1 Data Property"></a>4.1 Data Property</h3><p>组件的 <code>data</code> 选项是一个函数。Vue 会在创建新组件实例的过程中调用此函数。它应该返回一个对象，然后 Vue 会通过响应性系统将其包裹起来，并以 <code>$data</code> 的形式存储在组件实例中。为方便起见，该对象的任何顶级 property 也会直接通过组件实例暴露出来：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span>.<span class="property">count</span>) <span class="comment">// =&gt; 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>)       <span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 vm.count 的值也会更新 $data.count</span></span><br><span class="line">vm.<span class="property">count</span> = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">$data</span>.<span class="property">count</span>) <span class="comment">// =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反之亦然</span></span><br><span class="line">vm.<span class="property">$data</span>.<span class="property">count</span> = <span class="number">6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>) <span class="comment">// =&gt; 6</span></span><br></pre></td></tr></table></figure>

<p>这些实例 property 仅在实例首次创建时被添加，所以你需要确保它们都在 <code>data</code> 函数返回的对象中。必要时，要对尚未提供所需值的 property 使用 <code>null</code>、<code>undefined</code> 或其他占位的值。</p>
<p>直接将不包含在 <code>data</code> 中的新 property 添加到组件实例是可行的。但由于该 property 不在背后的响应式 <code>$data</code> 对象内，所以 <a href="https://v3.cn.vuejs.org/guide/reactivity.html">Vue 的响应性系统</a>不会自动跟踪它。</p>
<p>Vue 使用 <code>$</code> 前缀通过组件实例暴露自己的内置 API。它还为内部 property 保留 <code>_</code> 前缀。你应该避免使用这两个字符开头的顶级 <code>data</code> property 名称。</p>
<h3 id="4-2-方法"><a href="#4-2-方法" class="headerlink" title="4.2 方法"></a>4.2 方法</h3><p>我们用 <code>methods</code> 选项向组件实例添加方法，它应该是一个包含所需方法的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向该组件实例</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>) <span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">increment</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">count</span>) <span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure>

<p>Vue 自动为 <code>methods</code> 绑定 <code>this</code>，以便于它始终指向组件实例。这将确保方法在用作事件监听或回调时保持正确的 <code>this</code> 指向。在定义 <code>methods</code> 时应避免使用箭头函数，因为这会阻止 Vue 绑定恰当的 <code>this</code> 指向。</p>
<p>这些 <code>methods</code> 和组件实例的其它所有 property 一样可以在组件的模板中被访问。在模板中，它们通常被当做事件监听使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Up vote<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，点击 <code>&lt;button&gt;</code> 时，会调用 <code>increment</code> 方法。</p>
<p>也可以直接从模板中调用方法。就像下一章节即将看到的，通常换做<a href="https://v3.cn.vuejs.org/guide/computed.html">计算属性</a>会更好。但是，在计算属性不可行的情况下，使用方法可能会很有用。你可以在模板支持 JavaScript 表达式的任何地方调用方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;toTitleDate(date)&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; formatDate(date) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>toTitleDate</code> 或 <code>formatDate</code> 访问了任何响应式数据，则将其作为渲染依赖项进行跟踪，就像直接在模板中使用过一样。</p>
<p>从模板调用的方法不应该有任何副作用，比如更改数据或触发异步进程。如果你想这么做，应该使用<a href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期钩子</a>来替换。</p>
<h4 id="4-2-1-防抖和节流"><a href="#4-2-1-防抖和节流" class="headerlink" title="4.2.1 防抖和节流"></a>4.2.1 防抖和节流</h4><p>Vue 没有内置支持防抖和节流，但可以使用 <a href="https://lodash.com/">Lodash</a> 等库来实现。</p>
<p>如果某个组件仅使用一次，可以在 <code>methods</code> 中直接应用防抖：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/lodash@4.17.20/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 用 Lodash 的防抖函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">click</span>: _.<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// ... 响应点击 ...</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是，这种方法对于可复用组件有潜在的问题，因为它们都共享相同的防抖函数。为了使组件实例彼此独立，可以在生命周期钩子的 <code>created</code> 里添加该防抖函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;save-button&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 Lodash 实现防抖</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">debouncedClick</span> = _.<span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">click</span>, <span class="number">500</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 移除组件时，取消定时器</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">debouncedClick</span>.<span class="title function_">cancel</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ... 响应点击 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;debouncedClick&quot;&gt;</span></span><br><span class="line"><span class="string">      Save</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="五、-计算属性和侦听器"><a href="#五、-计算属性和侦听器" class="headerlink" title="五、 计算属性和侦听器"></a>五、 计算属性和侦听器</h2><h3 id="5-1-计算属性"><a href="#5-1-计算属性" class="headerlink" title="5.1 计算属性"></a>5.1 计算属性</h3><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如，有一个嵌套数组对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">author</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">        <span class="attr">books</span>: [</span><br><span class="line">          <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们想根据 <code>author</code> 是否已经有一些书来显示不同的消息</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;computed-basics&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; author.books.length &gt; 0 ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，模板不再是简单的和声明性的。你必须先看一下它，然后才能意识到它执行的计算取决于 <code>author.books</code>。如果要在模板中多次包含此计算，则问题会变得更糟。</p>
<p>所以，对于任何包含响应式数据的复杂逻辑，你都应该使用<strong>计算属性</strong>。</p>
<h4 id="5-1-1-基本例子"><a href="#5-1-1-基本例子" class="headerlink" title="5.1.1 基本例子"></a>5.1.1 基本例子</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;computed-basics&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">author</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">        <span class="attr">books</span>: [</span><br><span class="line">          <span class="string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Vue 3 - Basic Guide&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;Vue 4 - The Mystery&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="title function_">publishedBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#computed-basics&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>你可以像普通属性一样将数据绑定到模板中的计算属性。Vue 知道 <code>vm.publishedBookMessage</code> 依赖于 <code>vm.author.books</code>，因此当 <code>vm.author.books</code> 发生改变时，所有依赖 <code>vm.publishedBookMessage</code> 的绑定也会更新。而且最妙的是我们已经声明的方式创建了这个依赖关系：计算属性的 getter 函数没有副作用，它更易于测试和理解。</p>
<h4 id="5-1-2-计算属性缓存VS方法"><a href="#5-1-2-计算属性缓存VS方法" class="headerlink" title="5.1.2 计算属性缓存VS方法"></a>5.1.2 计算属性缓存VS方法</h4><p>可以通过在表达式中调用方法来达到同样的效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">calculateBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">author</span>.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从最终结果来说，这两种实现方式确实是完全相同的。然而，不同的是<strong>计算属性将基于它们的响应依赖关系缓存</strong>。计算属性只会在相关响应式依赖发生改变时重新求值。这就意味着只要 <code>author.books</code> 还没有发生改变，多次访问 <code>publishedBookMessage</code> 时计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>下面的计算属性将永远不会更新，因为 <code>Date.now ()</code> 不是响应式依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">now</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比之下，每当触发重新渲染时，调用方法将<strong>始终</strong>会再次执行函数。</p>
<p>为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <code>list</code>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <code>list</code>。如果没有缓存，我们将不可避免的多次执行 <code>list</code> 的 getter！如果你不希望有缓存，请用 <code>method</code> 来替代。</p>
<h4 id="5-1-3-计算属性的setter"><a href="#5-1-3-计算属性的setter" class="headerlink" title="5.1.3 计算属性的setter"></a>5.1.3 计算属性的setter</h4><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>]</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lastName</span> = names[names.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>
<h3 id="5-2-侦听器"><a href="#5-2-侦听器" class="headerlink" title="5.2 侦听器"></a>5.2 侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法来响应数据的变化。<strong>当需要在数据变化时执行异步或开销较大的操作时</strong>，这个方式是最有用的。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> watchExampleVM = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">question</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">answer</span>: <span class="string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 每当 question 发生变化时，该函数将会执行</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">question</span>(<span class="params">newQuestion, oldQuestion</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (newQuestion.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="title function_">getAnswer</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getAnswer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">answer</span> = <span class="string">&#x27;Thinking...&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        axios</span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">get</span>(<span class="string">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">answer</span> = response.<span class="property">data</span>.<span class="property">answer</span></span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">          .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">answer</span> = <span class="string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#watch-example&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220222141815.png" alt="image-20220222141807864"></p>
<p>在这个示例中，使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，并设置一个执行该操作的条件。这些都是计算属性无法做到的。</p>
<p>除了 watch 选项之外，你还可以使用命令式的 <a href="https://v3.cn.vuejs.org/api/instance-methods.html#watch">vm.$watch API</a>。</p>
<h4 id="5-2-1-计算属性VS侦听器"><a href="#5-2-1-计算属性VS侦听器" class="headerlink" title="5.2.1 计算属性VS侦听器"></a>5.2.1 计算属性VS侦听器</h4><p>Vue 提供了一种更通用的方式来观察和响应当前活动的实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，<code>watch</code> 很容易被滥用——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 <code>watch</code> 回调。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">      <span class="attr">fullName</span>: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">firstName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">lastName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>上面代码是命令式且重复的。下面的代码更好：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="六、-Class与Style绑定"><a href="#六、-Class与Style绑定" class="headerlink" title="六、 Class与Style绑定"></a>六、 Class与Style绑定</h2><p>在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<h3 id="6-1-绑定HTML-Class"><a href="#6-1-绑定HTML-Class" class="headerlink" title="6.1 绑定HTML Class"></a>6.1 绑定HTML Class</h3><h4 id="6-1-1-对象语法"><a href="#6-1-1-对象语法" class="headerlink" title="6.1.1 对象语法"></a>6.1.1 对象语法</h4><p>我们可以传给 <code>:class</code> (<code>v-bind:class</code> 的简写) 一个对象，以动态地切换 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于 data property <code>isActive</code> 的 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthiness</a>。</p>
<p>你可以在对象中传入更多字段来动态切换多个 class。此外，<code>:class</code> 指令也可以与普通的 <code>class</code> attribute 共存。当有如下模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>和如下 data：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">hasError</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code>，class 列表将变为 <code>&quot;static active text-danger&quot;</code>。</p>
<p>绑定的数据对象不必内联定义在模板里：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">classObject</span>: &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;text-danger&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的<a href="https://v3.cn.vuejs.org/guide/computed.html">计算属性</a>。这是一个常用且强大的模式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">classObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">error</span>,</span><br><span class="line">      <span class="string">&#x27;text-danger&#x27;</span>: <span class="variable language_">this</span>.<span class="property">error</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">error</span>.<span class="property">type</span> === <span class="string">&#x27;fatal&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-数组语法"><a href="#6-1-2-数组语法" class="headerlink" title="6.1.2 数组语法"></a>6.1.2 数组语法</h4><p>我们可以把一个数组传给 <code>:class</code>，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">    <span class="attr">errorClass</span>: <span class="string">&#x27;text-danger&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你想根据条件切换列表中的 class，可以使用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[isActive ? activeClass : &#x27;&#x27;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样写将始终添加 <code>errorClass</code>，但是只有在 <code>isActive</code> 为 truthy[<a href="https://v3.cn.vuejs.org/guide/class-and-style.html#footnote-1">1]</a> 时才添加 <code>activeClass</code>。</p>
<p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-3-在组件上使用"><a href="#6-1-3-在组件上使用" class="headerlink" title="6.1.3 在组件上使用"></a>6.1.3 在组件上使用</h4><p>当你在带有单个根元素的自定义组件上使用 <code>class</code> attribute 时，这些 class 将被添加到该元素中。此元素上的现有 class 将不会被覆盖。</p>
<p>例如，如果你声明了这个组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;p class=&quot;foo bar&quot;&gt;Hi!&lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在使用它的时候添加一些 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 将被渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于带数据绑定 class 也同样适用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 isActive 为 truthy时，HTML 将被渲染成为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar active&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你的组件有多个根元素，你需要定义哪些部分将接收这个 class。可以使用 <code>$attrs</code> 组件 property 执行此操作：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p :class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;This is a child component&lt;/span&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以在<a href="https://v3.cn.vuejs.org/guide/component-attrs.html">非 Prop 的 Attribute</a> 小节了解更多关于组件属性继承的信息。</p>
<h3 id="6-2-绑定内联样式"><a href="#6-2-绑定内联样式" class="headerlink" title="6.2 绑定内联样式"></a>6.2 绑定内联样式</h3><h4 id="6-2-1-对象语法"><a href="#6-2-1-对象语法" class="headerlink" title="6.2.1 对象语法"></a>6.2.1 对象语法</h4><p><code>:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">activeColor</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">fontSize</span>: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">styleObject</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="string">&#x27;13px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，对象语法常常结合返回对象的计算属性使用。</p>
<h4 id="6-2-2-数组语法"><a href="#6-2-2-数组语法" class="headerlink" title="6.2.2 数组语法"></a>6.2.2 数组语法</h4><p><code>:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-3-自动添加前缀"><a href="#6-2-3-自动添加前缀" class="headerlink" title="6.2.3 自动添加前缀"></a>6.2.3 自动添加前缀</h4><p>在 <code>:style</code> 中使用需要一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix">vendor prefix</a> (浏览器引擎前缀) 的 CSS property 时，Vue 将自动侦测并添加相应的前缀。Vue 是通过运行时检测来确定哪些样式的 property 是被当前浏览器支持的。如果浏览器不支持某个 property，Vue 会进行多次测试以找到支持它的前缀。</p>
<h4 id="6-2-4-多重值"><a href="#6-2-4-多重值" class="headerlink" title="6.2.4 多重值"></a>6.2.4 多重值</h4><p>可以为 style 绑定中的 property 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 <code>display: flex</code>。</p>
<h2 id="七、-条件渲染"><a href="#七、-条件渲染" class="headerlink" title="七、 条件渲染"></a>七、 条件渲染</h2><h3 id="7-1-v-if"><a href="#7-1-v-if" class="headerlink" title="7.1 v-if"></a>7.1 v-if</h3><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用 <code>v-else</code> 添加一个“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-1-1-在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#7-1-1-在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="7.1.1 在 &lt;template&gt; 元素上使用 v-if 条件渲染分组"></a>7.1.1 在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</h4><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-1-2-v-else"><a href="#7-1-2-v-else" class="headerlink" title="7.1.2 v-else"></a>7.1.2 v-else</h4><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p>
<h4 id="7-1-3-v-else-if"><a href="#7-1-3-v-else-if" class="headerlink" title="7.1.3 v-else-if"></a>7.1.3 v-else-if</h4><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，并且可以连续使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>与 <code>v-else</code> 的用法类似，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p>
<h3 id="7-2-v-show"><a href="#7-2-v-show" class="headerlink" title="7.2 v-show"></a>7.2 v-show</h3><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 <code>display</code> CSS property。</strong></p>
<p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p>
<h3 id="7-3-v-if-vs-v-show"><a href="#7-3-v-if-vs-v-show" class="headerlink" title="7.3 v-if vs v-show"></a>7.3 v-if vs v-show</h3><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——<strong>不管初始条件是什么，元素总是会被渲染</strong>，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，**<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销<strong>。因此，</strong>如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好**。</p>
<h3 id="7-4-v-if与v-for一起使用"><a href="#7-4-v-if与v-for一起使用" class="headerlink" title="7.4 v-if与v-for一起使用"></a>7.4 v-if与v-for一起使用</h3><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-if</code> 具有比 <code>v-for</code> 更高的优先级。</p>
<p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code>。</p>
<h2 id="八、-列表渲染"><a href="#八、-列表渲染" class="headerlink" title="八、 列表渲染"></a>八、 列表渲染</h2><h3 id="8-1-用-v-for-把一个数组映射为一组元素"><a href="#8-1-用-v-for-把一个数组映射为一组元素" class="headerlink" title="8.1 用 v-for 把一个数组映射为一组元素"></a>8.1 用 <code>v-for</code> 把一个数组映射为一组元素</h3><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;array-rendering&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">items</span>: [&#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#array-rendering&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;array-with-index&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Parent&#x27;</span>,</span><br><span class="line">      <span class="attr">items</span>: [&#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#array-with-index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-在-v-for-里使用对象"><a href="#8-2-在-v-for-里使用对象" class="headerlink" title="8.2 在 v-for 里使用对象"></a>8.2 在 <code>v-for</code> 里使用对象</h3><p>你也可以用 <code>v-for</code> 来遍历一个对象的 property。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in myObject&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">myObject</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">        <span class="attr">publishedAt</span>: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#v-for-object&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>你也可以提供第二个的参数为 property 名称 (也就是键名 key)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in myObject&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在遍历对象时，会按 <code>Object.keys()</code> 的结果遍历，但是不能保证它在不同 JavaScript 引擎下的结果都一致。</p>
<h3 id="8-3-维护状态"><a href="#8-3-维护状态" class="headerlink" title="8.3 维护状态"></a>8.3 维护状态</h3><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p>
<p>这个默认的模式是高效的，但是<strong>只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。</p>
<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一的 <code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://v3.cn.vuejs.org/style-guide/#keyed-v-for-essential">建议</a>尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p>
<p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。后面我们将在指南中看到，它还具有其它用途。</p>
<p>不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 key。请用字符串或数值类型的值。</p>
<p>更多 <code>key</code> attribute 的细节用法请移步至 <a href="https://v3.cn.vuejs.org/api/special-attributes.html#key"><code>key</code> 的 API 文档</a>。</p>
<h3 id="8-4-数组更新检测"><a href="#8-4-数组更新检测" class="headerlink" title="8.4 数组更新检测"></a>8.4 数组更新检测</h3><h4 id="8-4-1-变更方法"><a href="#8-4-1-变更方法" class="headerlink" title="8.4.1 变更方法"></a>8.4.1 变更方法</h4><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：</p>
<ul>
<li><strong><code>push()</code></strong></li>
<li><strong><code>pop()</code></strong></li>
<li><strong><code>shift()</code></strong></li>
<li><strong><code>unshift()</code></strong></li>
<li><strong><code>splice()</code></strong></li>
<li><strong><code>sort()</code></strong></li>
<li><strong><code>reverse()</code></strong></li>
</ul>
<p>你可以打开控制台，然后对前面例子的 <code>items</code> 数组尝试调用变更方法。比如 <code>example1.items.push(&#123; message: &#39;Baz&#39; &#125;)</code>。</p>
<h4 id="8-4-2-替换数组"><a href="#8-4-2-替换数组" class="headerlink" title="8.4.2 替换数组"></a>8.4.2 替换数组</h4><p>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有<strong>非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code><strong>。它们不会变更原始数组，而</strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">example1.<span class="property">items</span> = example1.<span class="property">items</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">message</span>.<span class="title function_">match</span>(<span class="regexp">/Foo/</span>))</span><br></pre></td></tr></table></figure>

<p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p>
<h3 id="8-5-显示过滤-x2F-排序后的结果"><a href="#8-5-显示过滤-x2F-排序后的结果" class="headerlink" title="8.5 显示过滤&#x2F;排序后的结果"></a>8.5 显示过滤&#x2F;排序后的结果</h3><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">numbers</span>: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">evenNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numbers</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在计算属性不适用的情况下 (例如，在嵌套的 <code>v-for</code> 循环中) 你可以使用一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;numbers in sets&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in even(numbers)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">sets</span>: [[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">even</span>(<span class="params">numbers</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.<span class="title function_">filter</span>(<span class="function"><span class="params">number</span> =&gt;</span> number % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-6-在-v-for-里使用值的范围"><a href="#8-6-在-v-for-里使用值的范围" class="headerlink" title="8.6 在 v-for 里使用值的范围"></a>8.6 在 <code>v-for</code> 里使用值的范围</h3><p><code>v-for</code> 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;range&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;n in 10&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;n&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-7-在-lt-template-gt-中使用-v-for"><a href="#8-7-在-lt-template-gt-中使用-v-for" class="headerlink" title="8.7 在 &lt;template&gt; 中使用 v-for"></a>8.7 在 <code>&lt;template&gt;</code> 中使用 <code>v-for</code></h3><p>类似于 <code>v-if</code>，你也可以利用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 来循环渲染一段包含多个元素的内容。比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;divider&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-8-v-for-与-v-if-一同使用"><a href="#8-8-v-for-与-v-if-一同使用" class="headerlink" title="8.8 v-for 与 v-if 一同使用"></a>8.8 <code>v-for</code> 与 <code>v-if</code> 一同使用</h3><p>注意我们<strong>不</strong>推荐在同一元素上使用 <code>v-if</code> 和 <code>v-for</code>。更多细节可查阅<a href="https://v3.cn.vuejs.org/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E5%BF%85%E8%A6%81">风格指南</a>。</p>
<p>当它们处于同一节点，<code>v-if</code> 的优先级比 <code>v-for</code> 更高，这意味着 <code>v-if</code> 将没有权限访问 <code>v-for</code> 里的变量：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这将抛出一个错误，因为“todo” property 没有在实例上定义 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以把 <code>v-for</code> 移动到 <code>&lt;template&gt;</code> 标签中来修正：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-9-在组件上使用-v-for"><a href="#8-9-在组件上使用-v-for" class="headerlink" title="8.9 在组件上使用 v-for"></a>8.9 在组件上使用 <code>v-for</code></h3><p>在自定义组件上，你可以像在任何普通元素上一样使用 <code>v-for</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 props：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不自动将 <code>item</code> 注入到组件里的原因是，这会使得组件与 <code>v-for</code> 的运作紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<p>下面是一个简单的 todo 列表的完整例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todo-list-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;addNewTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;new-todo&quot;</span>&gt;</span>Add a todo<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;newTodoText&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;new-todo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;E.g. Feed the cat&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(todo, index) in todos&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">&quot;todo.title&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">remove</span>=<span class="string">&quot;todos.splice(index, 1)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">newTodoText</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">todos</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;Do the dishes&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;Take out the trash&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;Mow the lawn&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">nextTodoId</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addNewTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">nextTodoId</span>++,</span><br><span class="line">        <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">newTodoText</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">newTodoText</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;li&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;$emit(&#x27;remove&#x27;)&quot;&gt;Remove&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;remove&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#todo-list-example&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="九、-事件处理"><a href="#九、-事件处理" class="headerlink" title="九、 事件处理"></a>九、 事件处理</h2><h3 id="9-1-监听事件"><a href="#9-1-监听事件" class="headerlink" title="9.1 监听事件"></a>9.1 监听事件</h3><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。用法为 <code>v-on:click=&quot;methodName&quot;</code> 或使用快捷方式 <code>@click=&quot;methodName&quot;</code></p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;basic-event&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#basic-event&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="9-2-事件处理方法"><a href="#9-2-事件处理方法" class="headerlink" title="9.2 事件处理方法"></a>9.2 事件处理方法</h3><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 还可以接收一个需要调用的方法名称。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;event-with-method&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Vue.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="comment">// `methods` 内部的 `this` 指向当前活动实例</span></span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM event</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">tagName</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#event-with-method&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="9-3-内联处理器中的方法"><a href="#9-3-内联处理器中的方法" class="headerlink" title="9.3 内联处理器中的方法"></a>9.3 内联处理器中的方法</h3><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inline-handler&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params">message</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#inline-handler&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">warn</span>(<span class="params">message, event</span>) &#123;</span><br><span class="line">    <span class="comment">// 现在可以访问到原生事件</span></span><br><span class="line">    <span class="keyword">if</span> (event) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">alert</span>(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-4-多事件处理器"><a href="#9-4-多事件处理器" class="headerlink" title="9.4 多事件处理器"></a>9.4 多事件处理器</h3><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one($event), two($event)&quot;</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">one</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一个事件处理器逻辑...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">two</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="comment">// 第二个事件处理器逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-5-事件修饰符"><a href="#9-5-事件修饰符" class="headerlink" title="9.5 事件修饰符"></a>9.5 事件修饰符</h3><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code></li>
<li><code>.prevent</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
<li><code>.once</code></li>
<li><code>.passive</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>@click.prevent.self</code> 会阻止<strong>元素本身及其子元素的点击的默认行为</strong>，而 <code>@click.self.prevent</code> 只会阻止对元素自身的点击的默认行为。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不像其它只能对原生的 DOM 事件起作用的修饰符，<code>.once</code> 修饰符还能被用到自定义的<a href="https://v3.cn.vuejs.org/guide/component-custom-events.html">组件事件</a>上。如果你还没有阅读关于组件的文档，现在大可不必担心。</p>
<p>Vue 还对应 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters"><code>addEventListener</code> 中的 passive 选项</a>提供了 <code>.passive</code> 修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发，   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成，                    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以防止其中包含 `event.preventDefault()` 的情况  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个 <code>.passive</code> 修饰符尤其能够提升移动端的性能。</p>
<p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用，因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，<code>.passive</code> 会告诉浏览器你<em>不想</em>阻止事件的默认行为。</p>
<h3 id="9-6-按键修饰符"><a href="#9-6-按键修饰符" class="headerlink" title="9.6 按键修饰符"></a>9.6 按键修饰符</h3><p>在监听键盘事件时，我们经常需要检查特定的按键。Vue 允许为 <code>v-on</code> 或者 <code>@</code> 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以直接将 <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values"><code>KeyboardEvent.key</code></a> 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>&#39;PageDown&#39;</code> 时被调用。</p>
<h4 id="9-6-1-按键别名"><a href="#9-6-1-按键别名" class="headerlink" title="9.6.1 按键别名"></a>9.6.1 按键别名</h4><p>Vue 为最常用的键提供了别名：</p>
<ul>
<li><code>.enter</code></li>
<li><code>.tab</code></li>
<li><code>.delete</code> (捕获“删除”和“退格”键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<h3 id="9-7-系统修饰键"><a href="#9-7-系统修饰键" class="headerlink" title="9.7 系统修饰键"></a>9.7 系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + Enter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.enter</span>=<span class="string">&quot;clear&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-7-1-exact-修饰符"><a href="#9-7-1-exact-修饰符" class="headerlink" title="9.7.1 .exact 修饰符"></a>9.7.1 <code>.exact</code> 修饰符</h4><p><code>.exact</code> 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-7-2-鼠标按钮修饰符"><a href="#9-7-2-鼠标按钮修饰符" class="headerlink" title="9.7.2 鼠标按钮修饰符"></a>9.7.2 鼠标按钮修饰符</h4><ul>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.middle</code></li>
</ul>
<p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p>
<h3 id="9-8-为什么在-HTML-中监听事件？"><a href="#9-8-为什么在-HTML-中监听事件？" class="headerlink" title="9.8 为什么在 HTML 中监听事件？"></a>9.8 为什么在 HTML 中监听事件？</h3><p>你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 <code>v-on</code> 或 <code>@</code> 有几个好处：</p>
<ol>
<li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li>
<li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li>
<li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。</li>
</ol>
<h2 id="十、-表单输入绑定"><a href="#十、-表单输入绑定" class="headerlink" title="十、 表单输入绑定"></a>十、 表单输入绑定</h2><h3 id="10-1-基础用法"><a href="#10-1-基础用法" class="headerlink" title="10.1 基础用法"></a>10.1 基础用法</h3><p>用 v-model 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值。它将始终将当前活动实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li>
<li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li>
<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li>
</ul>
<p>对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组织文字过程中得到更新。如果你也想响应这些更新，请使用 <code>input</code> 事件监听器和 <code>value</code> 绑定来替代 <code>v-model</code>。</p>
<h4 id="10-1-1-文本-Text"><a href="#10-1-1-文本-Text" class="headerlink" title="10.1.1 文本(Text)"></a>10.1.1 文本(Text)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;edit me&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-1-2-多行文本-Textarea"><a href="#10-1-2-多行文本-Textarea" class="headerlink" title="10.1.2 多行文本(Textarea)"></a>10.1.2 多行文本(Textarea)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插值在 textarea 中不起作用，请使用 <code>v-model</code> 来代替。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-1-3-复选框-Checkbox"><a href="#10-1-3-复选框-Checkbox" class="headerlink" title="10.1.3 复选框(Checkbox)"></a>10.1.3 复选框(Checkbox)</h4><p>单个复选框，绑定到布尔值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多个复选框，绑定到同一个数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;v-model-multiple-checkboxes&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jack&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;jack&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;john&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;john&quot;</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mike&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;mike&quot;</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">checkedNames</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#v-model-multiple-checkboxes&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="10-1-4-单选框-Radio"><a href="#10-1-4-单选框-Radio" class="headerlink" title="10.1.4 单选框(Radio)"></a>10.1.4 单选框(Radio)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;v-model-radiobutton&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">picked</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#v-model-radiobutton&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="10-1-5-选择框-Select"><a href="#10-1-5-选择框-Select" class="headerlink" title="10.1.5 选择框(Select)"></a>10.1.5 选择框(Select)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;v-model-select&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>Please select one<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selected</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#v-model-select&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>多选时 (绑定到一个数组)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用 <code>v-for</code> 渲染的动态选项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;v-model-select-dynamic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;option in options&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;option.value&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; option.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">selected</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: [</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;One&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;Two&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">text</span>: <span class="string">&#x27;Three&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;C&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#v-model-select-dynamic&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-2-值绑定"><a href="#10-2-值绑定" class="headerlink" title="10.2 值绑定"></a>10.2 值绑定</h3><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是有时我们可能想把值绑定到当前活动实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，此外，使用 <code>v-bind</code> 可以将输入值绑定到非字符串。</p>
<h4 id="10-2-1-复选框-Checkbox"><a href="#10-2-1-复选框-Checkbox" class="headerlink" title="10.2.1 复选框(Checkbox)"></a>10.2.1 复选框(Checkbox)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">true-value</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">false-value</span>=<span class="string">&quot;no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时：</span></span><br><span class="line">vm.<span class="property">toggle</span> === <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="comment">// 当未选中时：</span></span><br><span class="line">vm.<span class="property">toggle</span> === <span class="string">&#x27;no&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>true-value</code> 和 <code>false-value</code> attribute 并不会影响输入控件的 <code>value</code> attribute，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(即“yes”或“no”)，请换用单选按钮。</p>
<h4 id="10-2-2-单选框-Radio"><a href="#10-2-2-单选框-Radio" class="headerlink" title="10.2.2 单选框(Radio)"></a>10.2.2 单选框(Radio)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pick&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.<span class="property">pick</span> === vm.<span class="property">a</span></span><br></pre></td></tr></table></figure>

<h4 id="10-2-3-选择框选项-Select-Options"><a href="#10-2-3-选择框选项-Select-Options" class="headerlink" title="10.2.3 选择框选项 (Select Options)"></a>10.2.3 选择框选项 (Select Options)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.<span class="property">selected</span> <span class="comment">// =&gt; &#x27;object&#x27;</span></span><br><span class="line">vm.<span class="property">selected</span>.<span class="property">number</span> <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure>

<h3 id="10-3-修饰符"><a href="#10-3-修饰符" class="headerlink" title="10.3 修饰符"></a>10.3 修饰符</h3><h4 id="10-3-1-lazy"><a href="#10-3-1-lazy" class="headerlink" title="10.3.1 .lazy"></a>10.3.1 <code>.lazy</code></h4><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了<a href="https://v3.cn.vuejs.org/guide/forms.html#vmodel-ime-tip">上述</a>输入法组织文字时)。<strong>你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="10-3-2-number"><a href="#10-3-2-number" class="headerlink" title="10.3.2 .number"></a>10.3.2 <code>.number</code></h4><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当输入类型为 <code>text</code> 时这通常很有用。如果输入类型是 <code>number</code>，Vue 能够自动将原始字符串转换为数字，无需为 <code>v-model</code> 添加 <code>.number</code> 修饰符。如果这个值无法被 <code>parseFloat()</code> 解析，则返回原始的值。</p>
<h4 id="10-3-3-trim"><a href="#10-3-3-trim" class="headerlink" title="10.3.3 .trim"></a>10.3.3 <code>.trim</code></h4><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10-4-在组件上使用v-model"><a href="#10-4-在组件上使用v-model" class="headerlink" title="10.4 在组件上使用v-model"></a>10.4 在组件上使用<code>v-model</code></h3><p>HTML 原生的输入元素类型并不总能满足需求。幸好，Vue 的组件系统允许你创建具有完全自定义行为且可复用的输入组件。这些输入组件甚至可以和 <code>v-model</code> 一起使用！</p>
<p>要了解更多，请参阅组件指南中的<a href="https://v3.cn.vuejs.org/guide/component-basics.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model">自定义输入</a>组件。</p>
<h2 id="十一、-组件基础"><a href="#十一、-组件基础" class="headerlink" title="十一、 组件基础"></a>十一、 组件基础</h2><h3 id="11-1-基本示例"><a href="#11-1-基本示例" class="headerlink" title="11.1 基本示例"></a>11.1 基本示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个Vue 应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个名为 button-counter 的新全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">      You clicked me &#123;&#123; count &#125;&#125; times.</span></span><br><span class="line"><span class="string">    &lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件是带有名称的可复用实例，在这个例子中是 <code>&lt;button-counter&gt;</code>。我们可以把这个组件作为一个根实例中的自定义元素来使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#components-demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>因为组件是可复用的实例，所以它们与根实例接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。</p>
<h3 id="11-2-组件的复用"><a href="#11-2-组件的复用" class="headerlink" title="11.2 组件的复用"></a>11.2 组件的复用</h3><p>你可以将组件进行任意次数的复用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220222173726.png" alt="image-20220222173726036"></p>
<p>注意当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为<strong>你每用一次组件，就会有一个它的新实例被创建。</strong></p>
<h3 id="11-3-组件的组织"><a href="#11-3-组件的组织" class="headerlink" title="11.3 组件的组织"></a>11.3 组件的组织</h3><p><img src="https://v3.cn.vuejs.org/images/components.png" alt="Component Tree"></p>
<p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p>
<p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。至此，我们的组件都只是通过 <code>component</code> 方法全局注册的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ... 选项 ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>全局注册的组件可以在应用中的任何组件的模板中使用。</p>
<h3 id="11-4-通过Prop向子组件传递数据"><a href="#11-4-通过Prop向子组件传递数据" class="headerlink" title="11.4 通过Prop向子组件传递数据"></a>11.4 通过Prop向子组件传递数据</h3><p>Prop 是你可以在组件上注册的一些自定义 attribute。为了给博文组件传递一个标题，我们可以用 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#blog-post-demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>当一个值被传递给一个 prop attribute 时，它就成为该组件实例中的一个 property。该 property 的值可以在模板中访问，就像任何其他组件 property 一样。</p>
<p>一个组件可以拥有任意数量的 prop，并且在默认情况下，无论任何值都可以传递给 prop。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-post-demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Blogging with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然而在一个典型的应用中，你可能在 <code>data</code> 里有一个博文的数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">posts</span>: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;My journey with Vue&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Blogging with Vue&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Why Vue is so fun&#x27;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#blog-posts-demo&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>并想要为每篇博文渲染一个组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-posts-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上所示，你会发现我们可以使用 <code>v-bind</code> 来动态传递 prop。这在你一开始不清楚要渲染的具体内容，是非常有用的。</p>
<p>到目前为止，关于 prop 你需要了解的大概就这些了，如果你阅读完本页内容并掌握了它的内容，我们会推荐你再回来把 <a href="https://v3.cn.vuejs.org/guide/component-props.html">Props</a> 读完。</p>
<h3 id="11-5-监听子组件事件"><a href="#11-5-监听子组件事件" class="headerlink" title="11.5 监听子组件事件"></a>11.5 监听子组件事件</h3><p>我们在开发 <code>&lt;blog-post&gt;</code> 组件时，它的一些功能可能需要与父级组件进行沟通。例如我们可能会引入一个辅助功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</p>
<p>在其父组件中，我们可以通过添加一个 <code>postFontSize</code> data property 来支持这个功能：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">posts</span>: [</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">postFontSize</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以在模板中用来控制所有博文的字号：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-posts-events-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;post in posts&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;post.id&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们在每篇博文正文之前添加一个按钮来放大字号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;blog-post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">      &lt;button&gt;</span></span><br><span class="line"><span class="string">        Enlarge text</span></span><br><span class="line"><span class="string">      &lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>问题是这个按钮不会做任何事：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当点击这个按钮时，我们需要告诉父级组件放大所有博文的文本。幸好组件实例提供了一个自定义事件的系统来解决这个问题。父级组件可以像处理原生 DOM 事件一样通过 <code>v-on</code> 或 <code>@</code> 监听子组件实例的任意事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">...</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时子组件可以通过调用内建的 <a href="https://v3.cn.vuejs.org/api/instance-methods.html#emit"><strong>$emit</strong> 方法</a>并传入事件名称来触发一个事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlargeText&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多亏了 <code>@enlarge-text=&quot;postFontSize += 0.1&quot;</code> 监听器，父级组件能够接收事件并更新 <code>postFontSize</code> 的值。</p>
<p>我们可以在组件的 <code>emits</code> 选项中列出已抛出的事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;enlargeText&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这将允许我们检查组件抛出的所有事件，还可以选择<a href="https://v3.cn.vuejs.org/guide/component-custom-events.html#%E9%AA%8C%E8%AF%81%E6%8A%9B%E5%87%BA%E7%9A%84%E4%BA%8B%E4%BB%B6">验证它们</a>。</p>
<h4 id="11-5-1-使用事件抛出一个值"><a href="#11-5-1-使用事件抛出一个值" class="headerlink" title="11.5.1 使用事件抛出一个值"></a>11.5.1 使用事件抛出一个值</h4><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 <code>$emit</code> 的第二个参数来提供这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;enlargeText&#x27;, 0.1)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">...</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;postFontSize += $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者，如果这个事件处理函数是一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">...</span> @<span class="attr">enlarge-text</span>=<span class="string">&quot;onEnlargeText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么这个值将会作为第一个参数传入这个方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">onEnlargeText</span>(<span class="params">enlargeAmount</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">postFontSize</span> += enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="11-5-2-在组件上使用-v-model"><a href="#11-5-2-在组件上使用-v-model" class="headerlink" title="11.5.2 在组件上使用 v-model"></a>11.5.2 在组件上使用 v-model</h4><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用在组件上时，<code>v-model</code> 则会这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:model-value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:model-value</span>=<span class="string">&quot;searchText = $event&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p>
<ul>
<li>将其 <code>value</code> attribute 绑定到一个名叫 <code>modelValue</code> 的 prop 上</li>
<li>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>update:modelValue</code> 事件抛出</li>
</ul>
<p>写成代码之后是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;modelValue&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      :value=&quot;modelValue&quot;</span></span><br><span class="line"><span class="string">      @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在 <code>v-model</code> 就可以在这个组件上完美地工作起来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在该组件中实现 <code>v-model</code> 的另一种方法是使用 <code>computed</code> property 的功能来定义 getter 和 setter。<code>get</code> 方法应返回 <code>modelValue</code> property，<code>set</code> 方法应该触发相应的事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;custom-input&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;modelValue&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input v-model=&quot;value&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">modelValue</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:modelValue&#x27;</span>, value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在你只需要了解自定义组件事件，但一旦你读完本页并对其内容还觉得不错，我们建议你稍后再阅读有关<a href="https://v3.cn.vuejs.org/guide/component-custom-events.html">自定义事件</a>的完整指南。</p>
<h3 id="11-6-通过插槽分发内容"><a href="#11-6-通过插槽分发内容" class="headerlink" title="11.6 通过插槽分发内容"></a>11.6 通过插槽分发内容</h3><p>和 HTML 元素一样，我们经常需要向一个组件传递内容。</p>
<p>这可以通过使用 Vue 的自定义 <code>&lt;slot&gt;</code> 元素来实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;alert-box&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;demo-alert-box&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;strong&gt;Error!&lt;/strong&gt;</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如你所见，我们使用 <code>&lt;slot&gt;</code> 作为我们想要插入内容的占位符——就这么简单！</p>
<p>到目前为止，关于插槽你需要了解的大概就这些了，如果你阅读完本页内容并掌握了它的内容，我们会推荐你再回来把<a href="https://v3.cn.vuejs.org/guide/component-slots.html">插槽</a>读完。</p>
<h3 id="11-7-动态组件"><a href="#11-7-动态组件" class="headerlink" title="11.7 动态组件"></a>11.7 动态组件</h3><p><img src="https://raw.githubusercontent.com/gjbegjbe/pics/main/pics20220222175825.png" alt="image-20220222175825226"></p>
<p>上述内容可以通过 Vue 的 <code>&lt;component&gt;</code> 元素加一个特殊的 <code>is</code> attribute 来实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述示例中，<code>currentTabComponent</code> 可以包括：</p>
<ul>
<li>已注册组件的名字，或</li>
<li>一个组件选项对象</li>
</ul>
<p>查看<a href="https://codepen.io/team/Vue/pen/oNXaoKy">该沙盒</a>以调试绑定了组件注册名的完整代码，或在<a href="https://codepen.io/team/Vue/pen/oNXapXM">另一个沙盒</a>中查看绑定了组件选项对象的示例。</p>
<p>你也可以使用 <code>is</code> attribute 来创建常规的 HTML 元素。</p>
<p>到目前为止，关于动态组件你需要了解的大概就这些了，如果你阅读完本页内容并掌握了它的内容，我们会推荐你再回来把<a href="https://v3.cn.vuejs.org/guide/component-dynamic-async.html">动态 &amp; 异步组件</a>读完。</p>
<h3 id="11-8-解析DOM模板时的注意事项"><a href="#11-8-解析DOM模板时的注意事项" class="headerlink" title="11.8 解析DOM模板时的注意事项"></a>11.8 解析DOM模板时的注意事项</h3><p>如果想在 DOM 中直接书写 Vue 模板，Vue 将不得不从 DOM 中获取字符串。这会因为浏览器的原生 HTML 解析行为而导致一些小问题。</p>
<h4 id="11-8-1-元素位置受限"><a href="#11-8-1-元素位置受限" class="headerlink" title="11.8.1 元素位置受限"></a>11.8.1 元素位置受限</h4><p>有些 HTML 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部。</p>
<p>这会导致我们使用这些有约束条件的元素时遇到一些问题。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post-row</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个自定义组件 <code>&lt;blog-post-row&gt;</code> 会被作为无效的内容提升到外部，并导致最终渲染结果出错。我们可以使用特殊的 <a href="https://v3.cn.vuejs.org/api/special-attributes.html#is"><code>is</code> attribute</a> 作为一个变通的办法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;vue:blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="11-8-2-大小写不敏感"><a href="#11-8-2-大小写不敏感" class="headerlink" title="11.8.2 大小写不敏感"></a>11.8.2 大小写不敏感</h4><p>另外，HTML attribute 名不区分大小写，因此浏览器将所有大写字符解释为小写。这意味着当你在 DOM 模板中使用时，驼峰 prop 名称和 event 处理器参数需要使用它们的 kebab-cased (横线字符分隔) 等效值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  在 JavaScript 中是驼峰式</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;postTitle&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 HTML 中则是横线字符分割 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">post-title</span>=<span class="string">&quot;hello!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>















































]]></content>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题整理</title>
    <url>/2022/02/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="面试题整理"><a href="#面试题整理" class="headerlink" title="面试题整理"></a>面试题整理</h1><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="1-表单的基本组成部分有哪些，表单的主要用途是什么？"><a href="#1-表单的基本组成部分有哪些，表单的主要用途是什么？" class="headerlink" title="1. 表单的基本组成部分有哪些，表单的主要用途是什么？"></a>1. 表单的基本组成部分有哪些，表单的主要用途是什么？</h3><p>组成：表单标签、表单域、表单按钮</p>
<p>a、表单标签：这里面包含了处理表单数据所用 CGI 程序的 URL, 以及数据提交到服务器的方法。</p>
<p>b、表单域：包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框、和文件上传框等。</p>
<p>c、表单按钮：包括提交按钮，复位按钮和一般按钮；用于将数据传送到服务器上的 CGI 脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。</p>
<p>主要用途：表单在网页中主要负责数据采集的功能，和向服务器传送数据。</p>
<h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><h3 id="1-谈谈你对canvas的理解？"><a href="#1-谈谈你对canvas的理解？" class="headerlink" title="1. 谈谈你对canvas的理解？"></a>1. 谈谈你对canvas的理解？</h3><p>canvas相当于一个画布 本身没有绘制能力 即仅仅是图像的容器 通常通过js在上面绘制图像</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别"><a href="#1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别" class="headerlink" title="1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?"></a>1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?</h3><p><strong>共同点</strong>  </p>
<p>   保存在游览器端，同源  </p>
<p><strong>不同点</strong></p>
<ol>
<li>数据传输上<br>Cookie数据在浏览器和服务器之间来回传递。其他两个不会自动发送数据到服务器端，仅在本地存储。Cookie数据有保存路径可以限制保存在特定的位置下    </li>
<li>存储时间上<br>cookie只在设置的cookie过期时间之前一直有效；<br>sessionStorage：仅在当前浏览器窗口关闭前有效；<br>localStorage：始终有效    </li>
<li>数据共享上<br>localStorage 在所有同源窗口中都是共享的；<br>cookie也是在所有同源窗口中都是共享的。<br>sessionStorage：不在不同的窗口下共享，即使是同一个页面的两个窗口。    </li>
<li>存储大小上<br>cookie数据大小不超过4K，只适合保存很小的数据例如会话标识<br>sessionStorage和localStorage可以达到5M或更大</li>
</ol>
<h2 id="data"><a href="#data" class="headerlink" title="data-"></a>data-</h2><h3 id="1-data-属性的作用是什么？"><a href="#1-data-属性的作用是什么？" class="headerlink" title="1. data-属性的作用是什么？"></a>1. <code>data-</code>属性的作用是什么？</h3><p>data-是h5新增属性 -后面为自定义名称 可存储数据 存储的数据可以根据dataset获取 若浏览器不支持则采用getAttribute获取数据</p>
<h2 id="Doctype"><a href="#Doctype" class="headerlink" title="Doctype"></a>Doctype</h2><h3 id="1-Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#1-Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="1. Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>1. Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p>作用：声明位于文档中的最前面，处于标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。</p>
<p>严格模式：严格模式的排版和JS 运作模式是以该浏览器支持的最高标准运行。 </p>
<p>混杂模式：在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</p>
<p>意义：DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</p>
<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><h3 id="1-表单提交中Get和Post方式的区别？"><a href="#1-表单提交中Get和Post方式的区别？" class="headerlink" title="1. 表单提交中Get和Post方式的区别？"></a>1. 表单提交中Get和Post方式的区别？</h3><p>(1)、 get 是从服务器上获取数据， post 是向服务器传送数据。</p>
<p>(2)、 get 是把参数数据队列加到提交表单的 ACTION 属性所指的 URL 中，值和表单内各个字段一一对应，在 URL 中可以看到。 post 是通过 HTTP post 机制，将表单内各个字段与其内容放置在 HTML HEADER 内一起传送到 ACTION 属性所指的 URL 地址 , 用户看不到这个过程。</p>
<p>(3)、对于 get 方式，服务器端用 Request.QueryString 获取变量的值，对于 post 方式，服务器端用 Request.Form 获取提交的数据。</p>
<p>(4)、 get 传送的数据量较小，不能大于 2KB 。 post 传送的数据量较大，一般被默认为不受限制。但理论上， IIS4 中最大量为 80KB ， IIS5 中为 100KB 。</p>
<p>(5)、 get 安全性低， post 安全性较高。</p>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="1-CSS的盒子模型？"><a href="#1-CSS的盒子模型？" class="headerlink" title="1. CSS的盒子模型？"></a>1. CSS的盒子模型？</h3><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。 </p>
<p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 </p>
<p>标准盒模型：width &#x3D; content </p>
<p>IE盒模型： width &#x3D; content + 左右padding + 左右border</p>
<h2 id="href"><a href="#href" class="headerlink" title="href"></a>href</h2><h3 id="1-简述一下src与href的区别？"><a href="#1-简述一下src与href的区别？" class="headerlink" title="1. 简述一下src与href的区别？"></a>1. 简述一下src与href的区别？</h3><p>src是引入文件 href是链接跳转</p>
<p>src表示来源地址 主要用于img script iframe等</p>
<p>href表示超文本引用 主要用于link a等</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="1-说说你对HTML语义化的理解"><a href="#1-说说你对HTML语义化的理解" class="headerlink" title="1. 说说你对HTML语义化的理解?"></a>1. 说说你对HTML语义化的理解?</h3><p>Html 的语义化是指:根据内容的结构化，选择合适的语义化标签，便于开发者阅读和写出优雅的代码，同时让浏览器的爬虫和机器更好的解析。</p>
<p>语义化的目的:在没有用css的情况下，页面也能呈现出良好的内容结构，代码结构。</p>
<p>提高用户体验。</p>
<p>有利于搜索引擎。</p>
<p>方便其他设备解析。</p>
<p>便于团队维护和开发。</p>
<h3 id="2-HTML全局属性有哪些？"><a href="#2-HTML全局属性有哪些？" class="headerlink" title="2. HTML全局属性有哪些？"></a>2. HTML全局属性有哪些？</h3><p>accesskey 规定激活元素的快捷键；<br>class 规定元素的一个或多个类名（引用样式表中的类）；<br>contenteditable 规定元素内容是否可编辑；<br>contextmenu 规定元素的上下文菜单。上下文菜单在用户点击元素时显示。<br>data-* 用于存储页面或应用程序的私有定制数据。<br>dir 规定元素中内容的文本方向。<br>draggable 规定元素是否可拖动。<br>dropzone 规定在拖动被拖动数据时是否进行复制、移动或链接。<br>hidden  样式上会导致元素不显示，但是不能用这个属性实现样式。<br>id 规定元素的唯一 id。<br>lang 规定元素内容的语言。<br>spellcheck 规定是否对元素进行拼写和语法检查。<br>style 规定元素的CSS行内元素。<br>tabindex 规定元素的tab键次序。<br>title 规定有关元素的额外信息。<br>translate 规定是否应该翻译元素内容。</p>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="1-HTML5的优点与缺点？"><a href="#1-HTML5的优点与缺点？" class="headerlink" title="1. HTML5的优点与缺点？"></a>1. HTML5的优点与缺点？</h3><p>优点： a、网络标准统一、HTML5本身是由W3C推荐出来的。</p>
<p>​     b、多设备、跨平台 </p>
<p>​     c、即时更新。</p>
<p>​     d、提高可用性和改进用户的友好体验；</p>
<p>​     e、有几个新的标签，这将有助于开发人员定义重要的内容； </p>
<p>​     f、可以给站点带来更多的多媒体元素(视频和音频)；  </p>
<p>​     g、可以很好的替代Flash和Silverlight；</p>
<p>​     h、涉及到网站的抓取和索引的时候，对于SEO很友好； </p>
<p>​     i、被大量应用于移动应用程序和游戏。 </p>
<p>缺点： a、安全：像之前Firefox4的web socket和透明代理的实现存在严重的安全问题，同时web storage、web socket 这样的功能很容易被黑客利用，来盗取用户的信息和资料。 </p>
<p>​     b、完善性：许多特性各浏览器的支持程度也不一样。 </p>
<p>​     c、技术门槛：HTML5简化开发者工作的同时代表了有许多新的属性和API需要开发者学习，像web worker、web socket、web storage 等新特性，后台甚至浏览器原理的知识，机遇的同时也是巨大的挑战 </p>
<p>​     d、性能：某些平台上的引擎问题导致HTML5性能低下。 </p>
<p>​     e、浏览器兼容性：最大缺点，IE9以下浏览器几乎全军覆没。</p>
<h3 id="2-HTML5有哪些新特性、移除了哪些元素？"><a href="#2-HTML5有哪些新特性、移除了哪些元素？" class="headerlink" title="2. HTML5有哪些新特性、移除了哪些元素？"></a>2. HTML5有哪些新特性、移除了哪些元素？</h3><p>HTML新特性： </p>
<ul>
<li><p>​    图像Canvas      </p>
</li>
<li><p>​    多媒体video、audio      </p>
</li>
<li><p>​    本地存储localStorage、sessionStorage      </p>
</li>
<li><p>​    语义化更好的内容元素article、header、footer、nav、section      </p>
</li>
<li><p>​    表单控件date、time、canlendar、url、search      </p>
</li>
<li><p>​    新的技术webworker、websocket、Geolocation     </p>
<p>移除的元素： </p>
</li>
<li><p>​    纯表现的元素u、big、center、strike、tt、font、basefont      </p>
</li>
<li><p>​    框架集frame、frameset、noframes</p>
</li>
</ul>
<h3 id="3-HTML5行内元素有哪些-块级元素有哪些-空元素有哪些"><a href="#3-HTML5行内元素有哪些-块级元素有哪些-空元素有哪些" class="headerlink" title="3. HTML5行内元素有哪些,块级元素有哪些, 空元素有哪些?"></a>3. HTML5行内元素有哪些,块级元素有哪些, 空元素有哪些?</h3><p>(1)行内元素</p>
<p>a - 锚点</p>
<ul>
<li><p>abbr - 缩写</p>
</li>
<li><p>acronym - 首字</p>
</li>
<li><p>b - 粗体 ( 不推荐 )</p>
</li>
<li><p>bdo - bidi override</p>
</li>
<li><p>big - 大字体</p>
</li>
<li><p>br - 换行</p>
</li>
<li><p>cite - 引用</p>
</li>
<li><p>code - 计算机代码 ( 在引用源码的时候需要 )</p>
</li>
<li><p>dfn - 定义字段</p>
</li>
<li><p>em - 强调</p>
</li>
<li><p>font - 字体设定 ( 不推荐 )</p>
</li>
<li><p>i - 斜体</p>
</li>
<li><p>img - 图片</p>
</li>
<li><p>input - 输入框</p>
</li>
<li><p>kbd - 定义键盘文本</p>
</li>
<li><p>label - 表格标签</p>
</li>
<li><p>q - 短引用</p>
</li>
<li><p>s - 中划线 ( 不推荐 )</p>
</li>
<li><p>samp - 定义范例计算机代码</p>
</li>
<li><p>select - 项目选择</p>
</li>
<li><p>small - 小字体文本</p>
</li>
<li><p>span - 常用内联容器，定义文本内区块</p>
</li>
<li><p>strike - 中划线</p>
</li>
<li><p>strong - 粗体强调</p>
</li>
<li><p>sub - 下标</p>
</li>
<li><p>sup - 上标</p>
</li>
<li><p>textarea - 多行文本输入框</p>
</li>
<li><p>tt - 电传文本</p>
</li>
<li><p>u - 下划线</p>
</li>
<li><p>var - 定义变量</p>
</li>
</ul>
<p>(2)块元素 (block element)</p>
<ul>
<li><p>address - 地址</p>
</li>
<li><p>blockquote - 块引用</p>
</li>
<li><p>center - 居中对齐块</p>
</li>
<li><p>dir - 目录列表</p>
</li>
<li><p>div - 常用块级容易，也是 css layout 的主要标签</p>
</li>
<li><p>dl - 定义列表</p>
</li>
<li><p>fieldset - form控制组</p>
</li>
<li><p>form - 交互表单</p>
</li>
<li><p>h1 - 大标题</p>
</li>
<li><p>h2 - 副标题</p>
</li>
<li><p>h3 - 3级标题</p>
</li>
<li><p>h4 - 4级标题</p>
</li>
<li><p>h5 - 5级标题</p>
</li>
<li><p>h6 - 6级标题</p>
</li>
<li><p>hr - 水平分隔线</p>
</li>
<li><p>isindex - input prompt</p>
</li>
<li><p>menu - 菜单列表</p>
</li>
<li><p>noframes - frames可选内容，（对于不支持 frame 的浏览器显示此区块内容</p>
</li>
<li><p>noscript - ）可选脚本内容（对于不支持 script 的浏览器显示此内容）</p>
</li>
<li><p>ol - 排序表单</p>
</li>
<li><p>p - 段落</p>
</li>
<li><p>pre - 格式化文本</p>
</li>
<li><p>table - 表格</p>
</li>
<li><p>ul - 非排序列表</p>
</li>
</ul>
<p>可变元素</p>
<p>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</p>
<ul>
<li><p>applet - java applet</p>
</li>
<li><p>button - 按钮</p>
</li>
<li><p>del - 删除文本</p>
</li>
<li><p>iframe - inline frame</p>
</li>
<li><p>ins - 插入的文本</p>
</li>
<li><p>map - 图片区块 (map)</p>
</li>
<li><p>object - object对象</p>
</li>
<li><p>script - 客户端脚本</p>
</li>
</ul>
<p>(3)空元素 ( 在 HTML[1] 元素中，没有内容的 HTML 元素被称为空元素 )</p>
<p><br/> &#x2F;&#x2F;换行</p>
<hr> //分隔线
< input> //文本框等


<p><img> &#x2F;&#x2F;图片</p>
<link> <meta>

<h3 id="4-title与h3的区别、b与strong的区别、i与em的区别？"><a href="#4-title与h3的区别、b与strong的区别、i与em的区别？" class="headerlink" title="4. title与h3的区别、b与strong的区别、i与em的区别？"></a>4. title与h3的区别、b与strong的区别、i与em的区别？</h3><p>首先每一组的外观效果基本完全相同，标题效果、加粗效果、斜体效果。</p>
<p>但是title、b、i仅仅只有外观效果，而h3、strong、em属于语义化标签，对SEO有很大的帮助，会告诉搜索引擎这是很重要的。所以区别是很大的。</p>
<h3 id="5-HTML5标签的作用-用途"><a href="#5-HTML5标签的作用-用途" class="headerlink" title="5. HTML5标签的作用?(用途)"></a>5. HTML5标签的作用?(用途)</h3><p>a、使Web页面的内容更加有序和规范</p>
<p>b、使搜索引擎更加容易按照HTML5规则识别出有效的内容 </p>
<p>c、使Web页面更接近于一种数据字段和表</p>
<h3 id="6-HTML5-有哪些新增的表单元素？"><a href="#6-HTML5-有哪些新增的表单元素？" class="headerlink" title="6. HTML5 有哪些新增的表单元素？"></a>6. HTML5 有哪些新增的表单元素？</h3><p>datalist keygen output</p>
<h3 id="7-HTML5-标准提供了哪些新的-API？"><a href="#7-HTML5-标准提供了哪些新的-API？" class="headerlink" title="7. HTML5 标准提供了哪些新的 API？"></a>7. HTML5 标准提供了哪些新的 API？</h3><p>· Media API</p>
<p>· Text Track API</p>
<p>· Application Cache API</p>
<p>· User Interaction</p>
<p>· Data Transfer API</p>
<p>· Command API</p>
<p>· Constraint Validation API</p>
<p>· History API</p>
<h3 id="8-HTML5-应用程序缓存和浏览器缓存有什么区别？"><a href="#8-HTML5-应用程序缓存和浏览器缓存有什么区别？" class="headerlink" title="8. HTML5 应用程序缓存和浏览器缓存有什么区别？"></a>8. HTML5 应用程序缓存和浏览器缓存有什么区别？</h3><p>应用程序缓存是HTML5的重要特性之一，提供了离线使用的功能，让应用程序可以获取本地的网站内容，这个特性可以提高网站性能，它的实现借助于 manifest 文件，如下： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;  &lt;html manifest=”example.app***”&gt;  …..  &lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>   与传统浏览器缓存相比，它不强制用户访问的网站内容被缓存。</p>
<h3 id="9-HTML5-有哪些媒体标签？"><a href="#9-HTML5-有哪些媒体标签？" class="headerlink" title="9. HTML5 有哪些媒体标签？"></a>9. HTML5 有哪些媒体标签？</h3><p>H5总共新增了5个媒体标签：</p>
<p>video：定义一个视频</p>
<p>audio：定义音频内容</p>
<p>source：替代audio、video中src属性定义媒体资源</p>
<p>canvas：一个画布API</p>
<p>embed：定义外部的可交互的内容或插件如flash</p>
<h3 id="10-HTML5-中如何嵌入视频？"><a href="#10-HTML5-中如何嵌入视频？" class="headerlink" title="10. HTML5 中如何嵌入视频？"></a>10. HTML5 中如何嵌入视频？</h3><p>HTML5 支持 MP4 、 WebM 和 Ogg 格式的视频，下面是简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">”</span> <span class="attr">450</span> ″ <span class="attr">height</span>= <span class="string">”</span> <span class="attr">340</span> ″ <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”</span> <span class="attr">jamshed.mp4</span> ″ <span class="attr">type</span>= <span class="string">”</span> <span class="attr">video</span>/<span class="attr">mp4</span> ″ &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-HTML5中如何嵌入音频？"><a href="#11-HTML5中如何嵌入音频？" class="headerlink" title="11. HTML5中如何嵌入音频？"></a>11. HTML5中如何嵌入音频？</h3><p>HTML5 支持 MP3 、 Wav 和 Ogg 格式的音频，下面是简单示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”</span> <span class="attr">jamshed.mp3</span> ″ <span class="attr">type</span>= <span class="string">”</span> <span class="attr">audio</span>/<span class="attr">mpeg</span> ” &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-新的-HTML5-文档类型和字符集是？"><a href="#12-新的-HTML5-文档类型和字符集是？" class="headerlink" title="12. 新的 HTML5 文档类型和字符集是？"></a>12. 新的 HTML5 文档类型和字符集是？</h3><p>HTML5 文档类型： </p>
<!doctype html>


<p>HTML5 使用 UTF-8 编码示例： </p>
<meta charset=” UTF-8 ″ >


<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><h3 id="1-iframe的缺点"><a href="#1-iframe的缺点" class="headerlink" title="1. iframe的缺点"></a>1. iframe的缺点</h3><p>iframe会阻塞主页面的 Onload 事件；</p>
<p>搜索引擎的检索程序无法解读这种页面，不利于 SEO;</p>
<p>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</p>
<h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><h3 id="1-img的title和alt有什么区别？"><a href="#1-img的title和alt有什么区别？" class="headerlink" title="1. img的title和alt有什么区别？"></a>1. img的title和alt有什么区别？</h3><p>Alt 用于图片无法加载时显示</p>
<p>Title 为该属性提供信息，通常当鼠标滑动到元素上的时候显示</p>
<h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><h3 id="1-link和-import的区别"><a href="#1-link和-import的区别" class="headerlink" title="1. link和@import的区别?"></a>1. link和@import的区别?</h3><p>见link部分1</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-要动态改变层中内容可以使用的方法？"><a href="#1-要动态改变层中内容可以使用的方法？" class="headerlink" title="1. 要动态改变层中内容可以使用的方法？"></a>1. 要动态改变层中内容可以使用的方法？</h3><p>innerHTML，innerText</p>
<h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><h3 id="1-Label的作用是什么，是怎么用的？"><a href="#1-Label的作用是什么，是怎么用的？" class="headerlink" title="1. Label的作用是什么，是怎么用的？"></a>1. Label的作用是什么，是怎么用的？</h3><p>label标签用来定义表单控制间的关系 , 当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</p>
<p><label for='Name'>Number:</label></p>
<p>&lt;input type&#x3D;“ text “ name&#x3D;’Name’ id&#x3D;’Name’&#x2F;&gt;</p>
<p><label>Date:<input type='text' name='B'/></label></p>
<p>注意:label的for属性值要与后面对应的input标签id属性值相同<br><label for='Name'>Number:</label><br>&lt;input type&#x3D;“ text “ name&#x3D;’Name’ id&#x3D;’Name’&#x2F;&gt;</p>
<h2 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h2><h3 id="1-如何在页面上实现一个圆形的可点击区域？"><a href="#1-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="1. 如何在页面上实现一个圆形的可点击区域？"></a>1. 如何在页面上实现一个圆形的可点击区域？</h3><p>思路：先用html+css做出一个圆形，然后再用js为圆形添加一个点击事件</p>
<p>css：width: 200px;<br>    height: 200px;<br>    border-radius: 50%;</p>
<p>js：var a1&#x3D;document.querySelector(“.a1”)<br>        a1.onclick&#x3D;function(){<br>            console.log(11)<br>        }</p>
<h3 id="2-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？"><a href="#2-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？" class="headerlink" title="2. 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？"></a>2. 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果？</h3><p>&lt; di v  style&#x3D;”width:100%;height:1px;background-color:black”&gt;&lt;&#x2F; div&gt;</p>
<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><h3 id="1-link和-import的区别-1"><a href="#1-link和-import的区别-1" class="headerlink" title="1. link和@import的区别?"></a>1. link和@import的区别?</h3><p>XML&#x2F;HTML代码</p>
<link rel='stylesheet' rev='stylesheet' href='CSS文件 ' type='text/css' media='all' />

<p>XML&#x2F;HTML代码</p>
<style type='text/css' media='screen'>


@import url('CSS文件 ');

</style>

<p>两者都是外部引用CSS的方式，但是存在一定的区别：</p>
<p>区别1： link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务； @import 属于 CSS 范畴，只能加载 CSS 。</p>
<p>区别2： link 引用 CSS 时，在页面载入时同时加载； @import 需要页面网页完全载入以后加载。</p>
<p>区别3： link 是 XHTML 标签，无兼容问题； @import 是在 CSS2.1 提出的，低版本的浏览器不支持。</p>
<p>区别4： link 支持使用 Javascript 控制 DOM 去改变样式；而 @import 不支持。</p>
<h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><h3 id="1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别-1"><a href="#1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别-1" class="headerlink" title="1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?"></a>1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?</h3><p>见cookie部分1</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="1-浏览器页面有哪三层构成，分别是什么，作用是什么"><a href="#1-浏览器页面有哪三层构成，分别是什么，作用是什么" class="headerlink" title="1. 浏览器页面有哪三层构成，分别是什么，作用是什么?"></a>1. 浏览器页面有哪三层构成，分别是什么，作用是什么?</h3><p>构成：结构层、表示层、行为层 </p>
<p>分别是：HTML、CSS、JavaScript </p>
<p>作用：HTML实现页面结构，CSS完成页面的表现与风格，JavaScript实现一些客户端的功能与业务。</p>
<h3 id="2-浏览器的内核分别是什么"><a href="#2-浏览器的内核分别是什么" class="headerlink" title="2. 浏览器的内核分别是什么?"></a>2. 浏览器的内核分别是什么?</h3><p>a、 IE: trident 内核</p>
<p>b、 Firefox ： gecko 内核</p>
<p>c、 Safari:webkit 内核</p>
<p>d、 Opera: 以前是 presto 内核， Opera 现已改用 Google Chrome 的 Blink 内核</p>
<p>e、 Chrome:Blink( 基于 webkit ， Google 与 Opera Software 共同开发 )</p>
<h3 id="3-对浏览器内核的理解？"><a href="#3-对浏览器内核的理解？" class="headerlink" title="3. 对浏览器内核的理解？"></a>3. 对浏览器内核的理解？</h3><p>浏览器内核包含渲染引擎和js引擎</p>
<p>渲染引擎用于获取html、css和图片</p>
<p>js引擎用于解析执行JavaScript</p>
<h3 id="4-如何实现浏览器内多个标签页之间的通信"><a href="#4-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="4. 如何实现浏览器内多个标签页之间的通信?"></a>4. 如何实现浏览器内多个标签页之间的通信?</h3><p>WebSocket、 SharedWorker ；</p>
<p>也可以调用localstorage、 cookies 等本地存储方式。</p>
<h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><h3 id="1-表单提交中Get和Post方式的区别？-1"><a href="#1-表单提交中Get和Post方式的区别？-1" class="headerlink" title="1. 表单提交中Get和Post方式的区别？"></a>1. 表单提交中Get和Post方式的区别？</h3><p>见GET部分1</p>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><h3 id="1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别-2"><a href="#1-请你描述一下-cookies，sessionStorage-和-localStorage-的区别-2" class="headerlink" title="1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?"></a>1. 请你描述一下 cookies，sessionStorage 和 localStorage 的区别?</h3><p>见cookie部分1</p>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><h3 id="1-简述一下src与href的区别？-1"><a href="#1-简述一下src与href的区别？-1" class="headerlink" title="1. 简述一下src与href的区别？"></a>1. 简述一下src与href的区别？</h3><p>见href部分 1</p>
<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><h3 id="1-对SVG的理解"><a href="#1-对SVG的理解" class="headerlink" title="1. 对SVG的理解"></a>1. 对SVG的理解</h3><p>SVG（ Scalable Vector Graphics ）是可缩放矢量图形 可任意缩放图形 缩放图形后图形不失真 另外下载速度比jpg png等要快.</p>
<h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><h3 id="1-说说超链接target属性的取值和作用？"><a href="#1-说说超链接target属性的取值和作用？" class="headerlink" title="1. 说说超链接target属性的取值和作用？"></a>1. 说说超链接target属性的取值和作用？</h3><p>target这个属性指定所链接的页面在浏览器窗口中的打开方式。</p>
<p>_blank：在新窗口中打开链接文档</p>
<p>_self：默认。在相同的框架中打开链接文档</p>
<p>_top：在整个窗口中打开链接文档</p>
<p>_parent：在父级框架中集中打开</p>
<p>_framename:在指定的框架中打开链接文档</p>
<h2 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h2><h3 id="1-什么是w3c"><a href="#1-什么是w3c" class="headerlink" title="1. 什么是w3c"></a>1. 什么是w3c</h3><p>万维网联盟，是一个web开发的国际性联盟</p>
<h2 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h2><h3 id="1-什么是WebGL"><a href="#1-什么是WebGL" class="headerlink" title="1. 什么是WebGL"></a>1. 什么是WebGL</h3><p>WebGL（Web Graphics Library）是一种3D绘图标准，是js和OpenGL的结合，通过增加一个OpenGL的js绑定，WebGL可以为H5canvas提供硬件3D加速渲染，无需任何浏览器插件支持。</p>
<h3 id="2-WebGL有什么优点？"><a href="#2-WebGL有什么优点？" class="headerlink" title="2. WebGL有什么优点？"></a>2. WebGL有什么优点？</h3><p>第一，它通过HTML脚本本身实现 Web 交互式三维动画的制作，无需任何浏览器插件支持 ;</p>
<p>第二，它利用底层的图形硬件加速功能进行的图形渲染，是通过统一的、标准的、跨平台的OpenGL接口实现的。</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="1-WebSocket与消息推送？"><a href="#1-WebSocket与消息推送？" class="headerlink" title="1. WebSocket与消息推送？"></a>1. WebSocket与消息推送？</h3><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。依靠这种技术可以实现客户端和服务器端的长连接，双向实时通信。<br> 特点:<br> 事件驱动<br> 异步<br> 使用ws或者wss协议的客户端socket 能够实现真正意义上的推送功能 </p>
<p>  缺点： </p>
<p>  少部分浏览器不支持，浏览器支持的程度与方式有区别。</p>
<h2 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h2><h3 id="1-什么是web标准"><a href="#1-什么是web标准" class="headerlink" title="1. 什么是web标准"></a>1. 什么是web标准</h3><p>一系列标准的集合，包括结构化标准语言（html等）、表现标准语言（css）、行为标准语言（EMCAScript等）。这些标准大部分由万维网联盟起草和发布</p>
<h3 id="2-为什么使用web标准"><a href="#2-为什么使用web标准" class="headerlink" title="2. 为什么使用web标准"></a>2. 为什么使用web标准</h3><p>为了解决因浏览器版本不同、软硬件设备不同导致的需多版本开发的问题</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="1-CSS选择器"><a href="#1-CSS选择器" class="headerlink" title="1. CSS选择器"></a>1. CSS选择器</h3><p>标签选择器（如：body,div,p,ul,li）  </p>
<p>类选择器（如：class&#x3D;”head”,class&#x3D;”head_logo”）  </p>
<p>ID选择器（如：id&#x3D;”name”,id&#x3D;”name_txt”）  </p>
<p>全局选择器（如：*号）  </p>
<p>组合选择器（如：.head .head_logo,注意两选择器用空格键分开）  </p>
<p>继承选择器（如：div p,注意两选择器用空格键分开） </p>
<p>伪类选择器（如：就是链接样式,a元素的伪类，4种不同的状态：link、visited、active、hover。）</p>
<h3 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h3><p>!important&gt;内联样式&gt;id选择器&gt;类选择器&#x3D;伪类选择器&#x3D;属性选择器&gt;标签选择器&#x3D;伪元素选择器&gt;通配符&gt;继承</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
